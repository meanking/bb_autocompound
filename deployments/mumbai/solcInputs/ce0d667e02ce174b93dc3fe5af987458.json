{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IAaveStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAaveStake {\r\n    function depositETH(address lendingPool, address onBehalfOf, uint16 referralCode) external payable;\r\n    \r\n    function withdrawETH(address lendingPool, uint256 amount, address onBehalfOf) external;\r\n\r\n    function repayETH(address lendingPool, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\r\n\r\n    function borrowETH(address lendingPool, uint256 amount, uint256 interesRateMode, uint16 referralCode) external;\r\n    \r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external payable;\r\n    \r\n    function withdraw(address asset, uint256 amount, address to) external;\r\n\r\n    function borrow(address asset, uint256 amount, uint256 interesRateMode, uint16 referralCode, address onBehalfOf) external;\r\n\r\n    function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\r\n    \r\n    function getUserAccountData(address user) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n    \r\n    \r\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\r\n}"
    },
    "contracts/vault/StrategyAave.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"../interfaces/IAaveStake.sol\";\r\nimport \"../interfaces/IProtocolDataProvider.sol\";\r\nimport \"../interfaces/IUniPair.sol\";\r\nimport \"../interfaces/IUniRouter02.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\n\r\ncontract StrategyAave is Ownable, ReentrancyGuard, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant aaveDataAddress    = 0xFA3bD19110d986c5e5E9DD5F69362d05035D045B; // Mumbai testnet // 0x7551b5D2763519d4e37e8B81929D336De671d46d; // Polygon\r\n    address public constant aaveDepositAddress = 0x9198F13B08E299d85E096929fA9781A1E3d5d827; // Mumbai testnet // 0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf; // Polygon\r\n    address public constant aaveClaimAddress   = 0xd41aE58e803Edf4304334acCE4DC4Ec34a63C644; // Mumbai testnet // 0x357D51124f59836DeD84c8a1730D72B749d8BC23; // Polygon\r\n\r\n    address public wantAddress;\r\n    address public aTokenAddress;\r\n    address public debtTokenAddress;\r\n    address public earnedAddress;\r\n    uint16 public referralCode = 0;\r\n\r\n    address public uniRouterAddress       = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; // Polygon/Mumbai testnet\r\n    address public constant wmaticAddress = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889; // Mumbai testnet // 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; // Polygon\r\n    address public constant usdcAddress   = 0xe6b8a5CF854791412c1f6EFC7CAf629f5Df1c747; // Mumbai testnet // 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174; // Polygon\r\n    address public constant bbankAddress  = 0x63F7B7D85F9B02aD94c93A138a5b7508937b5942; // Mumbai testnet\r\n    address public constant vaultAddress  = 0xD81bdF78b3bC96EE1838fE4ee820145F8101BbE9;\r\n    address public constant feeAddress    = 0x2B8406c07613490cF56b978b8D531fd7EB066582;\r\n    \r\n    address public vaultChefAddress;\r\n    address public govAddress;\r\n\r\n    uint256 public lastEarnBlock = block.number;\r\n    uint256 public sharesTotal   = 0;\r\n\r\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public controllerFee = 50;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public buyBackRate = 450;\r\n    uint256 public constant feeMaxTotal = 1000;\r\n    uint256 public constant feeMax = 10000; // 100 = 1%\r\n\r\n    uint256 public withdrawFeeFactor = 10000; // 0% withdraw fee\r\n    uint256 public constant withdrawFeeFactorMax = 10000;\r\n    uint256 public constant withdrawFeeFactorLL = 9900;\r\n\r\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\r\n    uint256 public constant slippageFactorUL = 995;\r\n    \r\n    /**\r\n     * @dev Variables that can be changed to config profitability and risk:\r\n     * {borrowRate}          - At What % of our collateral do we borrow per leverage level.\r\n     * {borrowDepth}         - How many levels of leverage do we take.\r\n     * {BORROW_RATE_MAX}     - A limit on how much we can push borrow risk.\r\n     * {BORROW_DEPTH_MAX}    - A limit on how many steps we can leverage.\r\n     */\r\n    uint256 public borrowRate;\r\n    uint256 public borrowDepth = 6;\r\n    uint256 public minLeverage;\r\n    uint256 public BORROW_RATE_MAX;\r\n    uint256 public BORROW_RATE_MAX_HARD;\r\n    uint256 public BORROW_DEPTH_MAX = 8;\r\n    uint256 public constant BORROW_RATE_DIVISOR = 10000;\r\n\r\n    address[] public aTokenArray;\r\n    address[] public earnedToUsdcPath;\r\n    address[] public earnedToBbankPath;\r\n    address[] public earnedToWantPath;\r\n\r\n    event SetSettings(\r\n        uint256 _controllerFee,\r\n        uint256 _rewardRate,\r\n        uint256 _buyBackRate,\r\n        uint256 _withdrawFeeFactor,\r\n        uint256 _slippageFactor,\r\n        address _uniRouterAddress,\r\n        uint16 _referralCode\r\n    );\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == govAddress, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _vaultChefAddress,\r\n        address _wantAddress,\r\n        address _aTokenAddress,\r\n        address _debtTokenAddress,\r\n        address _earnedAddress,\r\n        address[] memory _earnedToUsdcPath,\r\n        address[] memory _earnedToBbankPath,\r\n        address[] memory _earnedToWantPath\r\n    ) {\r\n        govAddress = msg.sender;\r\n        vaultChefAddress = _vaultChefAddress;\r\n\r\n        wantAddress = _wantAddress;\r\n        aTokenAddress = _aTokenAddress;\r\n        aTokenArray = [aTokenAddress];\r\n        debtTokenAddress = _debtTokenAddress;\r\n\r\n        earnedAddress = _earnedAddress;\r\n\r\n        earnedToUsdcPath = _earnedToUsdcPath;\r\n        earnedToBbankPath = _earnedToBbankPath;\r\n        earnedToWantPath = _earnedToWantPath;\r\n        \r\n        (, uint256 ltv, uint256 threshold, , , bool collateral, bool borrow, , , ) = \r\n            IProtocolDataProvider(aaveDataAddress).getReserveConfigurationData(wantAddress);\r\n        BORROW_RATE_MAX = ltv * 99 / 100; // 1%\r\n        BORROW_RATE_MAX_HARD = ltv * 999 / 1000; // 0.1%\r\n        // At minimum, borrow rate always 10% lower than liquidation threshold\r\n        if (threshold * 9 / 10 > BORROW_RATE_MAX) {\r\n            borrowRate = BORROW_RATE_MAX;\r\n        } else {\r\n            borrowRate = threshold * 9 / 10;\r\n        }\r\n        // Only leverage if you can\r\n        if (!(collateral && borrow)) {\r\n            borrowDepth = 0;\r\n            BORROW_DEPTH_MAX = 0;\r\n        }\r\n\r\n        transferOwnership(_vaultChefAddress);\r\n\r\n        _resetAllowances();\r\n    }\r\n\r\n    function deposit(uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\r\n        // Call must happen before transfer\r\n        uint256 wantLockedBefore = wantLockedTotal();\r\n\r\n        IERC20(wantAddress).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _wantAmt\r\n        );\r\n\r\n        // Proper deposit amount for tokens with fees, or vaults with deposit fees\r\n        uint256 sharesAdded = _farm(_wantAmt);\r\n        if (sharesTotal > 0 && wantLockedBefore > 0) {\r\n            sharesAdded = sharesAdded * sharesTotal / wantLockedBefore;\r\n        }\r\n        sharesTotal = sharesTotal + sharesAdded;\r\n\r\n        return sharesAdded;\r\n    }\r\n\r\n    function _farm(uint256 _wantAmt) internal returns (uint256) {\r\n        uint256 wantAmt = wantLockedInHere();\r\n        if (wantAmt == 0) return 0;\r\n\r\n        // Cheat method to check for deposit fees in Aave\r\n        uint256 sharesBefore = wantLockedTotal() - _wantAmt;\r\n        _leverage(wantAmt);\r\n\r\n        return wantLockedTotal() - sharesBefore;\r\n    }\r\n\r\n    function withdraw(uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\r\n        require(_wantAmt > 0, \"_wantAmt is 0\");\r\n\r\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        \r\n        if (_wantAmt > wantAmt) {\r\n            // Fully deleverage\r\n            _deleverage();\r\n            wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        }\r\n\r\n        if (_wantAmt > wantAmt) {\r\n            _wantAmt = wantAmt;\r\n        }\r\n\r\n        if (_wantAmt > wantLockedTotal()) {\r\n            _wantAmt = wantLockedTotal();\r\n        }\r\n\r\n        uint256 sharesRemoved = _wantAmt * sharesTotal / wantLockedTotal();\r\n\r\n        if (sharesRemoved > sharesTotal) {\r\n            sharesRemoved = sharesTotal;\r\n        }\r\n        sharesTotal = sharesTotal - sharesRemoved;\r\n\r\n        // Withdraw fee\r\n        uint256 withdrawFee = _wantAmt * ( withdrawFeeFactorMax - withdrawFeeFactor ) / withdrawFeeFactorMax;\r\n        if (withdrawFee > 0) {\r\n            IERC20(wantAddress).safeTransfer(vaultAddress, withdrawFee);\r\n        }\r\n\r\n        _wantAmt = _wantAmt - withdrawFee;\r\n\r\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, _wantAmt);\r\n\r\n        if (!paused()) {\r\n            // Put it all back in\r\n            _leverage(wantLockedInHere());\r\n        }\r\n\r\n        return sharesRemoved;\r\n    }\r\n\r\n    function _supply(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).deposit(wantAddress, _amount, address(this), referralCode);\r\n    }\r\n\r\n    function _borrow(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).borrow(wantAddress, _amount, 2, referralCode, address(this));\r\n    }\r\n\r\n    function _repayBorrow(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).repay(wantAddress, _amount, 2, address(this));\r\n    }\r\n\r\n    function _removeSupply(uint256 _amount) internal {\r\n        IAaveStake(aaveDepositAddress).withdraw(wantAddress, _amount, address(this));\r\n    }\r\n\r\n    function _leverage(uint256 _amount) internal {\r\n        if (borrowDepth == 0) {\r\n            _supply(_amount);\r\n        } else if (_amount > minLeverage) {\r\n            for (uint256 i = 0; i < borrowDepth; i ++) {\r\n                _supply(_amount);\r\n                _amount = _amount * borrowRate / BORROW_RATE_DIVISOR;\r\n                _borrow(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deleverage() internal {\r\n        uint256 wantBal = wantLockedInHere();\r\n\r\n        if (borrowDepth > 0) {\r\n            while (wantBal < debtTotal()) {\r\n                _repayBorrow(wantBal);\r\n                _removeSupply(aTokenTotal() - supplyBalMin());\r\n                wantBal = wantLockedInHere();\r\n            }\r\n        }\r\n    }\r\n\r\n    function deleverageOnce() external onlyGov {\r\n        _deleverageOnce();\r\n    }\r\n\r\n    function _deleverageOnce() internal {\r\n        if (aTokenTotal() <= supplyBalTargeted()) {\r\n            _removeSupply(aTokenTotal() - supplyBalMin());\r\n        } else {\r\n            _removeSupply(aTokenTotal() - supplyBalTargeted());\r\n        }\r\n\r\n        _repayBorrow(wantLockedInHere());\r\n    }\r\n\r\n    function earn() external nonReentrant whenNotPaused onlyGov {\r\n        uint256 preEarn = IERC20(earnedAddress).balanceOf(address(this));\r\n\r\n        // Harvest farm tokens\r\n        IAaveStake(aaveClaimAddress).claimRewards(aTokenArray, type(uint256).max, address(this));\r\n\r\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this)) - preEarn;\r\n\r\n        if (earnedAmt > 0) {\r\n            earnedAmt = distributeFees(earnedAmt);\r\n            earnedAmt = buyBack(earnedAmt);\r\n\r\n            if (earnedAddress != wantAddress) {\r\n                _safeSwap(\r\n                    earnedAmt,\r\n                    earnedToWantPath,\r\n                    address(this)\r\n                );\r\n            }\r\n\r\n            lastEarnBlock = block.number;\r\n\r\n            _leverage(wantLockedInHere());\r\n        }\r\n    }\r\n\r\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (controllerFee > 0) {\r\n            uint256 fee = _earnedAmt * controllerFee / feeMax;\r\n\r\n            IWETH(wmaticAddress).withdraw(fee);\r\n            safeTransferETH(feeAddress, fee);\r\n\r\n            _earnedAmt = _earnedAmt - fee;\r\n        }\r\n\r\n        return _earnedAmt;\r\n    }\r\n\r\n    function buyBack(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (buyBackRate > 0) {\r\n            uint256 buyBackAmt = _earnedAmt * buyBackRate / feeMax;\r\n\r\n            _safeSwap(\r\n                buyBackAmt,\r\n                earnedToBbankPath,\r\n                buyBackAddress\r\n            );\r\n\r\n            _earnedAmt = _earnedAmt - buyBackAmt;\r\n        }\r\n\r\n        return _earnedAmt;\r\n    }\r\n\r\n    function pause() external onlyGov {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyGov {\r\n        _unpause();\r\n        _resetAllowances();\r\n    }\r\n\r\n    function wantLockedInHere() public view returns (uint256) {\r\n        return IERC20(wantAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function wantLockedTotal() public view returns (uint256) {\r\n        return wantLockedInHere() + aTokenTotal() - debtTotal();\r\n    }\r\n\r\n    function _resetAllowances() internal {\r\n        IERC20(wantAddress).safeApprove(aaveDepositAddress, type(uint256).max);\r\n        // IERC20(wantAddress).safeIncreaseAllowance(\r\n        //     aaveDepositAddress,\r\n        //     type(uint256).max\r\n        // );\r\n\r\n        IERC20(earnedAddress).safeApprove(uniRouterAddress, type(uint256).max);\r\n        // IERC20(earnedAddress).safeIncreaseAllowance(\r\n        //     uniRouterAddress,\r\n        //     type(uint256).max\r\n        // );\r\n    }\r\n\r\n    function resetAllowances() external onlyGov {\r\n        _resetAllowances();\r\n    }\r\n\r\n    function debtTotal() public view returns (uint256) {\r\n        return IERC20(debtTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function aTokenTotal() public view returns (uint256) {\r\n        return IERC20(aTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function supplyBalMin() public view returns (uint256) {\r\n        return debtTotal() * BORROW_RATE_DIVISOR / BORROW_RATE_MAX_HARD;\r\n    }\r\n\r\n    function supplyBalTargeted() public view returns (uint256) {\r\n        return debtTotal() * BORROW_RATE_DIVISOR / borrowRate;\r\n    }\r\n\r\n    function _safeSwap(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        address _to\r\n    ) internal {\r\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\r\n        uint256 amountOut = amounts[amounts.length - 1];\r\n\r\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _amountIn, \r\n            amountOut * slippageFactor, \r\n            _path, \r\n            _to, \r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address _to, uint256 _value) internal {\r\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\r\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n\r\n    function rebalance(uint256 _borrowRate, uint256 _borrowDepth) external onlyGov {\r\n        require(_borrowRate <= BORROW_RATE_MAX, \"!rate\");\r\n        require(_borrowRate != 0, \"borrowRate is used as a divisor\");\r\n        require(_borrowDepth <= BORROW_DEPTH_MAX, \"!depth\");\r\n\r\n        _deleverage();\r\n        borrowRate = _borrowRate;\r\n        borrowDepth = _borrowDepth;\r\n        _leverage(wantLockedInHere());\r\n    }\r\n\r\n    function setSettings(\r\n        uint256 _controllerFee,\r\n        uint256 _rewardRate,\r\n        uint256 _buyBackRate,\r\n        uint256 _withdrawFeeFactor,\r\n        uint256 _slippageFactor,\r\n        address _uniRouterAddress,\r\n        uint16 _referralCode\r\n    ) external onlyGov {\r\n        require(_controllerFee + _rewardRate + buyBackRate <= feeMaxTotal, \"Max fee of 100%\");\r\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \"_withdrawFeeFactor too low\");\r\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \"_withdrawFeeFactor too high\");\r\n        require(_slippageFactor <= slippageFactorUL, \"_slippageFactor too high\");\r\n\r\n        controllerFee = _controllerFee;\r\n        rewardRate = _rewardRate;\r\n        buyBackRate = _buyBackRate;\r\n        withdrawFeeFactor = _withdrawFeeFactor;\r\n        slippageFactor = _slippageFactor;\r\n        uniRouterAddress = _uniRouterAddress;\r\n        referralCode = _referralCode;\r\n\r\n        emit SetSettings(_controllerFee, _rewardRate, _buyBackRate, _withdrawFeeFactor, _slippageFactor, _uniRouterAddress, _referralCode);\r\n    }\r\n\r\n    function setGov(address _govAddress) external onlyGov {\r\n        govAddress = _govAddress;\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolDataProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IProtocolDataProvider {\r\n  struct TokenData {\r\n    string symbol;\r\n    address tokenAddress;\r\n  }\r\n\r\n  function getAllReservesTokens() external view returns (TokenData[] memory);\r\n  function getAllATokens() external view returns (TokenData[] memory);\r\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\r\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\r\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\r\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\r\n}"
    },
    "contracts/interfaces/IUniPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniPair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IUniRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IUniRouter01.sol\";\r\n\r\ninterface IUniRouter02 is IUniRouter01 {\r\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IUniRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WAVAX() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityAVAX(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountAVAX,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAX(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAXWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactAVAXForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactAVAX(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForAVAX(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapAVAXForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n"
    },
    "contracts/vault/StrategySushiSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../interfaces/ISushiStake.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\n\r\nimport \"./BaseStrategyLP.sol\";\r\n\r\ncontract StrategySushiSwap is BaseStrategyLP {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @dev Pool id in Sushiswap\r\n    uint256 public pid;\r\n    /// @dev Sushi yield address in Polygon|Rinkeby\r\n    address public constant sushiYieldAddress = 0x0769fd68dFb93167989C6f7254cd0D766Fb2841F;\r\n    /// @dev Wmatic address in Polygon\r\n    // address public constant wmaticAddress = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\r\n    address public constant wmaticAddress = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n\r\n    /// @dev [wmatic, bbank] path\r\n    address[] public wmaticToBBankPath;\r\n    /// @dev [wmatic, token0] path\r\n    address[] public wmaticToToken0Path;\r\n    /// @dev [wmatic, token1] path\r\n    address[] public wmaticToToken1Path;\r\n    \r\n\r\n    /// @param _vaultChefAddress VaultChef address\r\n    /// @param _pid pool id in Sushiswap\r\n    /// @param _wantAddress Want address\r\n    /// @param _gainedAddress Gained address\r\n    /// @param _gainedToWmaticPath Path for gained and wmatic\r\n    /// @param _gainedToBBankPath Path for gained and bbank\r\n    /// @param _wmaticToBBankPath Path for wmatic and bbank\r\n    /// @param _gainedToToken0Path Path for gained and token0\r\n    /// @param _gainedToToken1Path Path for gained and token1\r\n    /// @param _wmaticToToken0Path Path for wmatic and token0\r\n    /// @param _wmaticToToken1Path Path for wmatic and token1\r\n    /// @dev Constructor function\r\n    constructor(\r\n        address _vaultChefAddress,\r\n        uint256 _pid,\r\n        address _wantAddress,\r\n        address _gainedAddress,\r\n        address[] memory _gainedToWmaticPath,\r\n        address[] memory _gainedToBBankPath,\r\n        address[] memory _wmaticToBBankPath,\r\n        address[] memory _gainedToToken0Path,\r\n        address[] memory _gainedToToken1Path,\r\n        address[] memory _wmaticToToken0Path,\r\n        address[] memory _wmaticToToken1Path\r\n    ) {\r\n        govAddress = msg.sender;\r\n        vaultChefAddress = _vaultChefAddress;\r\n\r\n        wantAddress = _wantAddress;\r\n        token0Address = IUniPair(wantAddress).token0();\r\n        token1Address = IUniPair(wantAddress).token1();\r\n\r\n        uniRouterAddress = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\r\n        pid = _pid;\r\n        gainedAddress = _gainedAddress;\r\n\r\n        gainedToWmaticPath = _gainedToWmaticPath;\r\n        gainedToBBankPath = _gainedToBBankPath;\r\n        wmaticToBBankPath = _wmaticToBBankPath;\r\n        gainedToToken0Path = _gainedToToken0Path;\r\n        gainedToToken1Path = _gainedToToken1Path;\r\n        wmaticToToken0Path = _wmaticToToken0Path;\r\n        wmaticToToken1Path = _wmaticToToken1Path;\r\n\r\n        transferOwnership(vaultChefAddress);\r\n\r\n        _resetAllowances();\r\n    }\r\n    \r\n    /// @param _amount Deposit amount to the sushi yield\r\n    /// @dev Vault deposit function\r\n    function _vaultDeposit(uint256 _amount) internal override {\r\n        ISushiStake(sushiYieldAddress).deposit(pid, _amount, address(this));\r\n    }\r\n\r\n    /// @param _amount Withdraw amount from sushi yield\r\n    /// @dev Vault withdraw function\r\n    function _vaultWithdraw(uint256 _amount) internal override {\r\n        ISushiStake(sushiYieldAddress).withdraw(pid, _amount, address(this));\r\n    }\r\n\r\n    /// @dev Earn farm tokens and add liquidity\r\n    function earn() external override nonReentrant whenNotPaused onlyGov {\r\n        // Harvest farm tokens\r\n        ISushiStake(sushiYieldAddress).harvest(pid, address(this));\r\n        \r\n        uint256 gainedAmt = IERC20(gainedAddress).balanceOf(address(this));\r\n\r\n        if (gainedAmt > 0) {\r\n            gainedAmt = distributeFees(gainedAmt, gainedAddress);\r\n            gainedAmt = buyBack(gainedAmt, gainedAddress);\r\n\r\n            if (gainedAddress != token0Address) {\r\n                _safeSwap(\r\n                    gainedAmt / 2,\r\n                    gainedToToken0Path,\r\n                    address(this)\r\n                );\r\n            }\r\n\r\n            if (gainedAddress != token1Address) {\r\n                _safeSwap(\r\n                    gainedAmt / 2,\r\n                    gainedToToken1Path,\r\n                    address(this)\r\n                );\r\n            }\r\n        }\r\n        \r\n        if (gainedAmt > 0) {\r\n            uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\r\n            uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\r\n            if (token0Amt > 0 && token1Amt > 0) {\r\n                IUniRouter02(uniRouterAddress).addLiquidity(\r\n                    token0Address,\r\n                    token1Address,\r\n                    token0Amt,\r\n                    token1Amt,\r\n                    0,\r\n                    0,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n\r\n            lastEarnBlock = block.number;\r\n\r\n            _farm();\r\n        }\r\n    }\r\n\r\n    /// @param _gainedAmt Gained token amount\r\n    /// @param _gainedAddress Gained token address\r\n    /// @dev Get fee of gained token amount\r\n    function distributeFees(uint256 _gainedAmt, address _gainedAddress) internal returns (uint256) {\r\n        if (controllerFee > 0) {\r\n            uint256 fee = _gainedAmt * controllerFee / feeMax;\r\n\r\n            if (_gainedAddress == wmaticAddress) {\r\n                IWETH(wmaticAddress).withdraw(fee);\r\n                safeTransferETH(feeAddress, fee);\r\n            } else {\r\n                _safeSwapWmatic(\r\n                    fee,\r\n                    gainedToWmaticPath,\r\n                    feeAddress\r\n                );\r\n            }\r\n\r\n            _gainedAmt = _gainedAmt - fee;\r\n        }\r\n\r\n        return _gainedAmt;\r\n    }\r\n\r\n    /// @param _gainedAmt Gained token amount\r\n    /// @param _gainedAddress Gained token address\r\n    /// @dev BuyBack gained token\r\n    function buyBack(uint256 _gainedAmt, address _gainedAddress) internal returns (uint256) {\r\n        if (buyBackRate > 0) {\r\n            uint256 buyBackAmt = _gainedAmt * buyBackRate / feeMax;\r\n\r\n            _safeSwap(\r\n                buyBackAmt,\r\n                _gainedAddress == wmaticAddress ? wmaticToBBankPath : gainedToBBankPath,\r\n                buyBackAddress\r\n            );\r\n\r\n            _gainedAmt = _gainedAmt - buyBackAmt;\r\n        }\r\n\r\n        return _gainedAmt;\r\n    }\r\n\r\n    /// @dev Shares token total amount of vault\r\n    function vaultSharesTotal() public override view returns (uint256) {\r\n        (uint256 balance,) = ISushiStake(sushiYieldAddress).userInfo(pid, address(this));\r\n        return balance;\r\n    }\r\n\r\n    /// @dev Locked want token total amount\r\n    function wantLockedTotal() public override view returns (uint256) {\r\n        (uint256 balance,) = ISushiStake(sushiYieldAddress).userInfo(pid, address(this));\r\n        return IERC20(wantAddress).balanceOf(address(this)) + balance;\r\n    }\r\n\r\n    /// @dev Approve and increase allowances for all need tokens\r\n    function _resetAllowances() internal override {\r\n        IERC20(wantAddress).safeApprove(sushiYieldAddress, uint256(0));\r\n        IERC20(wantAddress).safeIncreaseAllowance(\r\n            sushiYieldAddress,\r\n            type(uint256).max\r\n        );\r\n\r\n        IERC20(gainedAddress).safeApprove(uniRouterAddress, uint256(0));\r\n        IERC20(gainedAddress).safeIncreaseAllowance(\r\n            uniRouterAddress,\r\n            type(uint256).max\r\n        );\r\n\r\n        IERC20(wmaticAddress).safeApprove(uniRouterAddress, uint256(0));\r\n        IERC20(wmaticAddress).safeIncreaseAllowance(\r\n            uniRouterAddress,\r\n            type(uint256).max\r\n        );\r\n\r\n        IERC20(token0Address).safeApprove(uniRouterAddress, uint256(0));\r\n        IERC20(token0Address).safeIncreaseAllowance(\r\n            uniRouterAddress,\r\n            type(uint256).max\r\n        );\r\n\r\n        IERC20(token1Address).safeApprove(uniRouterAddress, uint256(0));\r\n        IERC20(token1Address).safeIncreaseAllowance(\r\n            uniRouterAddress,\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    /// @dev Withdraw the total shares token\r\n    function _emergencyVaultWithdraw() internal override {\r\n        ISushiStake(sushiYieldAddress).withdraw(pid, vaultSharesTotal(), address(this));\r\n    }\r\n\r\n    /// @dev Withdraw the total shares token\r\n    function emergencyPanic() external onlyGov {\r\n        _pause();\r\n        ISushiStake(sushiYieldAddress).emergencyWithdraw(pid, address(this));\r\n    }\r\n\r\n    /// @param to Address to send token\r\n    /// @param value Amount of token\r\n    /// @dev Transfer the amount of token\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    },
    "contracts/interfaces/ISushiStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISushiStake {\r\n    function deposit(uint256 pid, uint256 amount, address to) external;\r\n\r\n    function withdraw(uint256 pid, uint256 amount, address to) external;\r\n\r\n    function emergencyWithdraw(uint256 pid, address to) external;\r\n\r\n    function harvest(uint256 pid, address to) external;\r\n    \r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n}"
    },
    "contracts/vault/BaseStrategyLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BaseStrategy.sol\";\r\n\r\nabstract contract BaseStrategyLP is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function convertDustToGained() external nonReentrant whenNotPaused {\r\n        // Converts dust tokens into gained tokens, which will be reinvested on the next earn().\r\n\r\n        // Converts token0 dust (if any) to gained tokens\r\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\r\n        if (token0Amt > 0 && token0Address != gainedAddress) {\r\n            // Swap all dust tokens to gained tokens\r\n            _safeSwap(\r\n                token0Amt,\r\n                token0ToGainedPath,\r\n                address(this)\r\n            );\r\n        }\r\n\r\n        // Converts token1 dust (if any) to gained tokens\r\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\r\n        if (token1Amt > 0 && token1Address != gainedAddress) {\r\n            // Swap all dust tokens to gained tokens\r\n            _safeSwap(\r\n                token1Amt,\r\n                token1ToGainedPath,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n}"
    },
    "contracts/vault/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"../interfaces/IUniPair.sol\";\r\nimport \"../interfaces/IUniRouter02.sol\";\r\n\r\nabstract contract BaseStrategy is Ownable, ReentrancyGuard, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public wantAddress;\r\n    address public token0Address;\r\n    address public token1Address;\r\n    address public gainedAddress;\r\n\r\n    address public uniRouterAddress;\r\n    address public constant bbankAddress = 0x63F7B7D85F9B02aD94c93A138a5b7508937b5942;\r\n    address public withdrawFeeAddress = 0xD81bdF78b3bC96EE1838fE4ee820145F8101BbE9;\r\n    address public feeAddress = 0x2B8406c07613490cF56b978b8D531fd7EB066582;\r\n    address public vaultChefAddress;\r\n    address public govAddress;\r\n\r\n    uint256 public lastEarnBlock = block.number;\r\n    uint256 public sharesTotal = 0;\r\n\r\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public controllerFee = 50;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public buyBackRate = 450;\r\n    uint256 public constant feeMaxTotal = 1000;\r\n    uint256 public constant feeMax = 10000; // 100 = 1%\r\n\r\n    uint256 public withdrawFeeFactor = 10000; // 0% withdraw fee\r\n    uint256 public constant withdrawFeeFactorMax = 10000;\r\n    uint256 public constant withdrawFeeFactorLL = 9900;\r\n\r\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\r\n    uint256 public constant slippageFactorUL = 995;\r\n\r\n    address[] public gainedToWmaticPath;\r\n    address[] public gainedToBBankPath;\r\n    address[] public gainedToToken0Path;\r\n    address[] public gainedToToken1Path;\r\n    address[] public token0ToGainedPath;\r\n    address[] public token1ToGainedPath;\r\n\r\n    event SetSettings(\r\n        uint256 _controllerFee,\r\n        uint256 _rewardRate,\r\n        uint256 _buyBackRate,\r\n        uint256 _withdrawFeeFactor,\r\n        uint256 _slippageFactor,\r\n        address _uniRouterAddress\r\n    );\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == govAddress, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    function _vaultDeposit(uint256 _amount) internal virtual;\r\n    function _vaultWithdraw(uint256 _amount) internal virtual;\r\n    function earn() external virtual;\r\n    function vaultSharesTotal() public virtual view returns (uint256);\r\n    function wantLockedTotal() public virtual view returns (uint256);\r\n    function _resetAllowances() internal virtual;\r\n    function _emergencyVaultWithdraw() internal virtual;\r\n\r\n    function deposit(uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\r\n        // Call must happen before transfer\r\n        uint256 wantLockedBefore = wantLockedTotal();\r\n\r\n        uint256 balanceBefore = IERC20(wantAddress).balanceOf(address(this));\r\n\r\n        IERC20(wantAddress).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\r\n\r\n        _wantAmt = IERC20(wantAddress).balanceOf(address(this)) - balanceBefore;\r\n        require(_wantAmt > 0, \"We only accept amount > 0\");\r\n\r\n        uint256 underlyingAdded = _farm();\r\n\r\n        uint256 sharesAmount = underlyingAdded;\r\n\r\n        if (sharesTotal > 0) {\r\n            sharesAmount = (underlyingAdded * sharesTotal) / wantLockedBefore;\r\n        }\r\n\r\n        sharesTotal = sharesTotal + sharesAmount;\r\n\r\n        return sharesAmount;\r\n    }\r\n\r\n    function _farm() internal returns (uint256) {\r\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        if (wantAmt == 0) return 0;\r\n\r\n        uint256 sharesBefore = vaultSharesTotal();\r\n        _vaultDeposit(wantAmt);\r\n        uint256 sharesAfter = vaultSharesTotal();\r\n\r\n        return sharesAfter - sharesBefore;\r\n    }\r\n\r\n    function withdraw(uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\r\n        require(_wantAmt > 0, \"_wantAmt is 0\");\r\n\r\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n\r\n        if (_wantAmt > wantAmt) {\r\n            _vaultWithdraw(_wantAmt - wantAmt);\r\n            wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        }\r\n\r\n        if (_wantAmt > wantAmt) {\r\n            _wantAmt = wantAmt;\r\n        }\r\n\r\n        if (_wantAmt > wantLockedTotal()) {\r\n            _wantAmt = wantLockedTotal();\r\n        }\r\n\r\n        uint256 sharesRemoved = _wantAmt * sharesTotal / wantLockedTotal();\r\n        if (sharesRemoved > sharesTotal) {\r\n            sharesRemoved = sharesTotal;\r\n        }\r\n        sharesTotal = sharesTotal - sharesRemoved;\r\n\r\n        uint256 withdrawFee = _wantAmt * (withdrawFeeFactorMax -withdrawFeeFactor) / withdrawFeeFactorMax;\r\n        if (withdrawFee > 0) {\r\n            IERC20(wantAddress).safeTransfer(withdrawFeeAddress, withdrawFee);\r\n        }\r\n\r\n        _wantAmt = _wantAmt - withdrawFee;\r\n\r\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, _wantAmt);\r\n\r\n        return sharesRemoved;\r\n    }\r\n\r\n    function distributeFees(uint256 _gainedAmt) internal returns (uint256) {\r\n        if (controllerFee > 0) {\r\n            uint256 fee = _gainedAmt * controllerFee / feeMax;\r\n\r\n            _safeSwapWmatic(\r\n                fee,\r\n                gainedToWmaticPath,\r\n                feeAddress\r\n            );\r\n\r\n            _gainedAmt = _gainedAmt - fee;\r\n        }\r\n\r\n        return _gainedAmt;\r\n    }\r\n\r\n    function buyBack(uint256 _gainedAmt) internal virtual returns (uint256) {\r\n        if (buyBackRate > 0) {\r\n            uint256 buyBackAmt = _gainedAmt * buyBackRate / feeMax;\r\n\r\n            _safeSwap(\r\n                buyBackAmt,\r\n                gainedToBBankPath,\r\n                buyBackAddress\r\n            );\r\n\r\n            _gainedAmt = _gainedAmt - buyBackAmt;\r\n        }\r\n\r\n        return _gainedAmt;\r\n    }\r\n\r\n    function resetAllowances() external onlyGov {\r\n        _resetAllowances();\r\n    }\r\n\r\n    function pause() external onlyGov {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyGov {\r\n        _unpause();\r\n        _resetAllowances();\r\n    }\r\n\r\n    function panic() external onlyGov {\r\n        _pause();\r\n        _emergencyVaultWithdraw();\r\n    }\r\n\r\n    function unpanic() external onlyGov {\r\n        _unpause();\r\n        _farm();\r\n    }\r\n\r\n    function setGov(address _govAddress) external onlyGov {\r\n        govAddress = _govAddress;\r\n    }\r\n\r\n    function setSettings(\r\n        uint256 _controllerFee,\r\n        uint256 _rewardRate,\r\n        uint256 _buyBackRate,\r\n        uint256 _withdrawFeeFactor,\r\n        uint256 _slippageFactor,\r\n        address _uniRouterAddress\r\n    ) external onlyGov {\r\n        require(_controllerFee + _rewardRate + _buyBackRate <= feeMaxTotal, \"Max fee of 10%\");\r\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \"_withdrawFeeFactor too low\");\r\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \"_withdrawFeeFactor too high\");\r\n        require(_slippageFactor <= slippageFactorUL, \"_slippageFactor too high\");\r\n\r\n        controllerFee = _controllerFee;\r\n        rewardRate = _rewardRate;\r\n        buyBackRate = _buyBackRate;\r\n        withdrawFeeFactor = _withdrawFeeFactor;\r\n        slippageFactor = _slippageFactor;\r\n        uniRouterAddress = _uniRouterAddress;\r\n\r\n        emit SetSettings(\r\n            _controllerFee, \r\n            _rewardRate, \r\n            _buyBackRate, \r\n            _withdrawFeeFactor, \r\n            _slippageFactor, \r\n            _uniRouterAddress\r\n        );\r\n    }\r\n\r\n    function _safeSwap(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        address _to\r\n    ) internal {\r\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\r\n        uint256 amountOut = amounts[amounts.length - 1];\r\n\r\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _amountIn,\r\n            amountOut * slippageFactor / 1000,\r\n            _path,\r\n            _to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _safeSwapWmatic(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        address _to\r\n    ) internal {\r\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\r\n        uint256 amountOut = amounts[amounts.length - 1];\r\n\r\n        IUniRouter02(uniRouterAddress).swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n            _amountIn,\r\n            amountOut * slippageFactor / 1000,\r\n            _path,\r\n            _to,\r\n            block.timestamp\r\n        );\r\n    }\r\n}"
    },
    "contracts/vault/VaultChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"../interfaces/IStrategy.sol\";\r\nimport \"./Operators.sol\";\r\n\r\ncontract VaultChef is Ownable, ReentrancyGuard, Operators, ERC20 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 shares; // How many LP tokens the user has provided.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 want; // Address of the want token.\r\n        address strat; // Strategy address that will auto compound want tokens\r\n    }\r\n\r\n    PoolInfo[] public poolInfo; // Info of each pool.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes LP tokens. pool => user => shares\r\n    mapping(address => bool) private strats;\r\n\r\n    event AddPool(address indexed strat, uint256 indexed pid);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event ResetAllowance(address indexed user);\r\n    event ResetSingleAllowance(address indexed user, uint256 indexed pid);\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC20(_name, _symbol) {\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new want to the pool. Can only be called by the owner.\r\n     */\r\n    function addPool(address _strat) external onlyOwner nonReentrant {\r\n        require(!strats[_strat], \"Existing strategy\");\r\n        // Below line is just for validate ERC20 contract\r\n        IERC20(IStrategy(_strat).wantAddress()).allowance(address(this), address(_strat));\r\n\r\n        poolInfo.push(PoolInfo({want: IERC20(IStrategy(_strat).wantAddress()), strat: _strat}));\r\n        strats[_strat] = true;\r\n        resetSingleAllowance(poolInfo.length - 1);\r\n        emit AddPool(_strat, poolInfo.length - 1);\r\n    }\r\n\r\n    // Want tokens moved from user -> this -> Strat (compounding)\r\n    function deposit(uint256 _pid, uint256 _wantAmt) external nonReentrant {\r\n        _deposit(_pid, _wantAmt, msg.sender);\r\n        _mint(msg.sender, _wantAmt);\r\n    }\r\n\r\n    // For unique contract calls\r\n    function depositTo(\r\n        uint256 _pid,\r\n        uint256 _wantAmt,\r\n        address _to\r\n    ) external nonReentrant onlyOperator {\r\n        _deposit(_pid, _wantAmt, _to);\r\n    }\r\n\r\n    function _deposit(\r\n        uint256 _pid,\r\n        uint256 _wantAmt,\r\n        address _to\r\n    ) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_to];\r\n\r\n        if (_wantAmt > 0) {\r\n            IERC20 _wantToken = pool.want;\r\n\r\n            uint256 balanceBefore = _wantToken.balanceOf(address(this));\r\n            _wantToken.safeTransferFrom(msg.sender, address(this), _wantAmt);\r\n            _wantAmt = _wantToken.balanceOf(address(this)) - balanceBefore;\r\n            require(_wantAmt > 0, \"We only accept amount > 0\");\r\n\r\n            uint256 sharesAdded = IStrategy(pool.strat).deposit(_wantAmt);\r\n            user.shares = user.shares + sharesAdded;\r\n        }\r\n        emit Deposit(_to, _pid, _wantAmt);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _wantAmt) external nonReentrant {\r\n        _withdraw(_pid, _wantAmt, msg.sender);\r\n        _burn(msg.sender, _wantAmt);\r\n    }\r\n\r\n    // For unique contract calls\r\n    function withdrawTo(\r\n        uint256 _pid,\r\n        uint256 _wantAmt,\r\n        address _to\r\n    ) external nonReentrant onlyOperator {\r\n        _withdraw(_pid, _wantAmt, _to);\r\n    }\r\n\r\n    function _withdraw(\r\n        uint256 _pid,\r\n        uint256 _wantAmt,\r\n        address _to\r\n    ) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        uint256 wantLockedTotal = IStrategy(pool.strat).wantLockedTotal();\r\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\r\n\r\n        require(user.shares > 0, \"user.shares is 0\");\r\n        require(sharesTotal > 0, \"sharesTotal is 0\");\r\n\r\n        // Withdraw want tokens\r\n        uint256 amount = (user.shares * wantLockedTotal) / sharesTotal;\r\n        if (_wantAmt > amount) {\r\n            _wantAmt = amount;\r\n        }\r\n        if (_wantAmt > 0) {\r\n            uint256 sharesRemoved = IStrategy(pool.strat).withdraw(_wantAmt);\r\n\r\n            if (sharesRemoved > user.shares) {\r\n                user.shares = 0;\r\n            } else {\r\n                user.shares = user.shares - sharesRemoved;\r\n            }\r\n\r\n            uint256 wantBal = IERC20(pool.want).balanceOf(address(this));\r\n            if (wantBal < _wantAmt) {\r\n                _wantAmt = wantBal;\r\n            }\r\n            pool.want.safeTransfer(_to, _wantAmt);\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _wantAmt);\r\n    }\r\n\r\n    // Withdraw everything from pool for yourself\r\n    function withdrawAll(uint256 _pid) external nonReentrant {\r\n        _withdraw(_pid, type(uint256).max, msg.sender);\r\n    }\r\n\r\n    function resetAllowances() external onlyOwner {\r\n        for (uint256 i = 0; i < poolInfo.length; i++) {\r\n            PoolInfo storage pool = poolInfo[i];\r\n            pool.want.safeApprove(pool.strat, uint256(0));\r\n            pool.want.safeIncreaseAllowance(pool.strat, type(uint256).max);\r\n        }\r\n\r\n        emit ResetAllowance(owner());\r\n    }\r\n\r\n    function resetSingleAllowance(uint256 _pid) public onlyOwner {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.want.safeApprove(pool.strat, uint256(0));\r\n        pool.want.safeIncreaseAllowance(pool.strat, type(uint256).max);\r\n\r\n        emit ResetSingleAllowance(owner(), _pid);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// For interacting with our own strategy\r\ninterface IStrategy {\r\n    // Want address\r\n    function wantAddress() external view returns (address);\r\n\r\n    // Total want tokens managed by strategy\r\n    function wantLockedTotal() external view returns (uint256);\r\n\r\n    // Sum of all shares of users to wantLockedTotal\r\n    function sharesTotal() external view returns (uint256);\r\n\r\n    // Main want token compounding function\r\n    function earn() external;\r\n\r\n    // Transfer want tokens autoFarm -> strategy\r\n    function deposit(uint256 _wantAmt) external returns (uint256);\r\n\r\n    // Transfer want tokens strategy -> vaultChef\r\n    function withdraw(uint256 _wantAmt) external returns (uint256);\r\n}\r\n"
    },
    "contracts/vault/Operators.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Operators is Ownable {\r\n    mapping(address => bool) public operators;\r\n\r\n    event OperatorUpdated(address indexed operator, bool indexed status);\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    // Update the status of the operator\r\n    function updateOperator(address _operator, bool _status) external onlyOwner {\r\n        operators[_operator] = _status;\r\n        emit OperatorUpdated(_operator, _status);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}