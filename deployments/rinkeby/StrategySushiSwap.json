{
  "address": "0xB948DcEC4b7D1976c811cbE5f1e1D0f75Ae0688F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultChefAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_wantAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gainedAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_gainedToWmaticPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_gainedToBBankPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_wmaticToBBankPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_gainedToToken0Path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_gainedToToken1Path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_wmaticToToken0Path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_wmaticToToken1Path",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bbankAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertDustToGained",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPanic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMaxTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gainedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gainedToBBankPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gainedToToken0Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gainedToToken1Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gainedToWmaticPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactorUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiYieldAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "token0ToGainedPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "token1ToGainedPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpanic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultChefAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultSharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantLockedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wmaticToBBankPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wmaticToToken0Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wmaticToToken1Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
  "receipt": {
    "to": null,
    "from": "0xD81bdF78b3bC96EE1838fE4ee820145F8101BbE9",
    "contractAddress": "0xB948DcEC4b7D1976c811cbE5f1e1D0f75Ae0688F",
    "transactionIndex": 1,
    "gasUsed": "3868655",
    "logsBloom": "0x
    "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811",
    "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0xB948DcEC4b7D1976c811cbE5f1e1D0f75Ae0688F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d81bdf78b3bc96ee1838fe4ee820145f8101bbe9"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0xB948DcEC4b7D1976c811cbE5f1e1D0f75Ae0688F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000d81bdf78b3bc96ee1838fe4ee820145f8101bbe9",
          "0x000000000000000000000000a0e206b80f20fbef05ca077a2af9ec02d0209d9c"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0x63214D4ef18B74A1B43C6B521F34b830C261aEc6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000000769fd68dfb93167989c6f7254cd0d766fb2841f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0x63214D4ef18B74A1B43C6B521F34b830C261aEc6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000000769fd68dfb93167989c6f7254cd0d766fb2841f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0xd1D34c82bB30A81CbD22C9000A95BEA9DAbDcc5c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0xd1D34c82bB30A81CbD22C9000A95BEA9DAbDcc5c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0xc778417E063141139Fce010982780140Aa0cD5Ab",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0xc778417E063141139Fce010982780140Aa0cD5Ab",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0x733051cb7fB3FfBCC693E0a89Cb72edC2Cd19F05",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 11,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0x733051cb7fB3FfBCC693E0a89Cb72edC2Cd19F05",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0x7bf5F00AdF1a71bad1Fdbb916e4F0cC229f9c541",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 13,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10089728,
        "transactionHash": "0xbc37f7e491f08ba251390336bb0e712b9ac6b8d376161723e54c660318574f21",
        "address": "0x7bf5F00AdF1a71bad1Fdbb916e4F0cC229f9c541",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b948dcec4b7d1976c811cbe5f1e1d0f75ae0688f",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 14,
        "blockHash": "0xa97c3c0636f6c29db71e522ec73595ab1821f98ef76c93114c10247a0230f811"
      }
    ],
    "blockNumber": 10089728,
    "cumulativeGasUsed": "3980988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0E206B80f20FBEf05CA077a2AF9eC02d0209d9c",
    3,
    "0x63214d4ef18b74a1b43c6b521f34b830c261aec6",
    "0xd1d34c82bb30a81cbd22c9000a95bea9dabdcc5c",
    [
      "0xADa17be1b58891d8e1FDA75F73f93152969F6fda",
      "0xc778417e063141139fce010982780140aa0cd5ab"
    ],
    [
      "0xd1d34c82bb30a81cbd22c9000a95bea9dabdcc5c",
      "0xADa17be1b58891d8e1FDA75F73f93152969F6fda"
    ],
    [
      "0xc778417e063141139fce010982780140aa0cd5ab",
      "0xADa17be1b58891d8e1FDA75F73f93152969F6fda"
    ],
    [
      "0xd1d34c82bb30a81cbd22c9000a95bea9dabdcc5c",
      "0x733051cb7fb3ffbcc693e0a89cb72edc2cd19f05"
    ],
    [
      "0xd1d34c82bb30a81cbd22c9000a95bea9dabdcc5c",
      "0x7bf5f00adf1a71bad1fdbb916e4f0cc229f9c541"
    ],
    [
      "0xc778417e063141139fce010982780140aa0cd5ab",
      "0x7bf5f00adf1a71bad1fdbb916e4f0cc229f9c541"
    ],
    [
      "0xc778417e063141139fce010982780140aa0cd5ab",
      "0x7bf5f00adf1a71bad1fdbb916e4f0cc229f9c541"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "0d541464a0cd0dd30b26f5cc291917bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultChefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gainedAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_gainedToWmaticPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_gainedToBBankPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_wmaticToBBankPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_gainedToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_gainedToToken1Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_wmaticToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_wmaticToToken1Path\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bbankAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertDustToGained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPanic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gainedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gainedToBBankPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gainedToToken0Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gainedToToken1Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gainedToWmaticPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiYieldAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token0ToGainedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token1ToGainedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpanic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultChefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultSharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wmaticToBBankPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wmaticToToken0Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wmaticToToken1Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor function\",\"params\":{\"_gainedAddress\":\"Gained address\",\"_gainedToBBankPath\":\"Path for gained and bbank\",\"_gainedToToken0Path\":\"Path for gained and token0\",\"_gainedToToken1Path\":\"Path for gained and token1\",\"_gainedToWmaticPath\":\"Path for gained and wmatic\",\"_pid\":\"pool id in Sushiswap\",\"_vaultChefAddress\":\"VaultChef address\",\"_wantAddress\":\"Want address\",\"_wmaticToBBankPath\":\"Path for wmatic and bbank\",\"_wmaticToToken0Path\":\"Path for wmatic and token0\",\"_wmaticToToken1Path\":\"Path for wmatic and token1\"}},\"earn()\":{\"details\":\"Earn farm tokens and add liquidity\"},\"emergencyPanic()\":{\"details\":\"Withdraw the total shares token\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vaultSharesTotal()\":{\"details\":\"Shares token total amount of vault\"},\"wantLockedTotal()\":{\"details\":\"Locked want token total amount\"}},\"stateVariables\":{\"pid\":{\"details\":\"Pool id in Sushiswap\"},\"sushiYieldAddress\":{\"details\":\"Sushi yield address in Polygon|Rinkeby\"},\"wmaticAddress\":{\"details\":\"Wmatic address in Polygon\"},\"wmaticToBBankPath\":{\"details\":\"[wmatic, bbank] path\"},\"wmaticToToken0Path\":{\"details\":\"[wmatic, token0] path\"},\"wmaticToToken1Path\":{\"details\":\"[wmatic, token1] path\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/StrategySushiSwap.sol\":\"StrategySushiSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISushiStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ISushiStake {\\r\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid, address to) external;\\r\\n\\r\\n    function harvest(uint256 pid, address to) external;\\r\\n    \\r\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\r\\n}\",\"keccak256\":\"0xb880151a6d09bc2bb8a2d079cc15c95e8d1a7180d36ebd8cf83344cd6aef3a71\",\"license\":\"MIT\"},\"contracts/interfaces/IUniPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniPair {\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0202463b0cdcf35c9e3245ad4d000f2d8dc5b1962d534172b1acfb9166785\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WAVAX() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityAVAX(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountAVAX,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityAVAX(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityAVAXWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactAVAXForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactAVAX(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForAVAX(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapAVAXForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xea1ef3448bfe7656b0ea6bf544eade958c733f06356f82417be7b634a10754b3\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IUniRouter01.sol\\\";\\r\\n\\r\\ninterface IUniRouter02 is IUniRouter01 {\\r\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountAVAX);\\r\\n\\r\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountAVAX);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdfebfad987b867e2d203a1f276ebc27a14cc863b1358ec43498be817843cf1b5\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\",\"keccak256\":\"0x59683eac981f6f969e7cddb4383334f34c6ec54bf5aa4b10343d689d2ca99dec\",\"license\":\"MIT\"},\"contracts/vault/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IUniPair.sol\\\";\\r\\nimport \\\"../interfaces/IUniRouter02.sol\\\";\\r\\n\\r\\nabstract contract BaseStrategy is Ownable, ReentrancyGuard, Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public wantAddress;\\r\\n    address public token0Address;\\r\\n    address public token1Address;\\r\\n    address public gainedAddress;\\r\\n\\r\\n    address public uniRouterAddress;\\r\\n    address public constant bbankAddress = 0x63F7B7D85F9B02aD94c93A138a5b7508937b5942;\\r\\n    address public withdrawFeeAddress;\\r\\n    address public feeAddress;\\r\\n    address public vaultChefAddress;\\r\\n    address public govAddress;\\r\\n\\r\\n    uint256 public lastEarnBlock = block.number;\\r\\n    uint256 public sharesTotal = 0;\\r\\n\\r\\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n    uint256 public controllerFee = 50;\\r\\n    uint256 public rewardRate = 0;\\r\\n    uint256 public buyBackRate = 450;\\r\\n    uint256 public constant feeMaxTotal = 1000;\\r\\n    uint256 public constant feeMax = 10000; // 100 = 1%\\r\\n\\r\\n    uint256 public withdrawFeeFactor = 10000; // 0% withdraw fee\\r\\n    uint256 public constant withdrawFeeFactorMax = 10000;\\r\\n    uint256 public constant withdrawFeeFactorLL = 9900;\\r\\n\\r\\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\\r\\n    uint256 public constant slippageFactorUL = 995;\\r\\n\\r\\n    address[] public gainedToWmaticPath;\\r\\n    address[] public gainedToBBankPath;\\r\\n    address[] public gainedToToken0Path;\\r\\n    address[] public gainedToToken1Path;\\r\\n    address[] public token0ToGainedPath;\\r\\n    address[] public token1ToGainedPath;\\r\\n\\r\\n    event SetSettings(\\r\\n        uint256 _controllerFee,\\r\\n        uint256 _rewardRate,\\r\\n        uint256 _buyBackRate,\\r\\n        uint256 _withdrawFeeFactor,\\r\\n        uint256 _slippageFactor,\\r\\n        address _uniRouterAddress\\r\\n    );\\r\\n\\r\\n    modifier onlyGov() {\\r\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _vaultDeposit(uint256 _amount) internal virtual;\\r\\n    function _vaultWithdraw(uint256 _amount) internal virtual;\\r\\n    function earn() external virtual;\\r\\n    function vaultSharesTotal() public virtual view returns (uint256);\\r\\n    function wantLockedTotal() public virtual view returns (uint256);\\r\\n    function _resetAllowances() internal virtual;\\r\\n    function _emergencyVaultWithdraw() internal virtual;\\r\\n\\r\\n    function deposit(uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\\r\\n        // Call must happen before transfer\\r\\n        uint256 wantLockedBefore = wantLockedTotal();\\r\\n\\r\\n        uint256 balanceBefore = IERC20(wantAddress).balanceOf(address(this));\\r\\n\\r\\n        IERC20(wantAddress).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\\r\\n\\r\\n        _wantAmt = IERC20(wantAddress).balanceOf(address(this)) - balanceBefore;\\r\\n        require(_wantAmt > 0, \\\"We only accept amount > 0\\\");\\r\\n\\r\\n        uint256 underlyingAdded = _farm();\\r\\n\\r\\n        uint256 sharesAmount = underlyingAdded;\\r\\n\\r\\n        if (sharesTotal > 0) {\\r\\n            sharesAmount = (underlyingAdded * sharesTotal) / wantLockedBefore;\\r\\n        }\\r\\n\\r\\n        sharesTotal = sharesTotal + sharesAmount;\\r\\n\\r\\n        return sharesAmount;\\r\\n    }\\r\\n\\r\\n    function _farm() internal returns (uint256) {\\r\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\r\\n        if (wantAmt == 0) return 0;\\r\\n\\r\\n        uint256 sharesBefore = vaultSharesTotal();\\r\\n        _vaultDeposit(wantAmt);\\r\\n        uint256 sharesAfter = vaultSharesTotal();\\r\\n\\r\\n        return sharesAfter - sharesBefore;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\\r\\n        require(_wantAmt > 0, \\\"_wantAmt is 0\\\");\\r\\n\\r\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\r\\n\\r\\n        if (_wantAmt > wantAmt) {\\r\\n            _vaultWithdraw(_wantAmt - wantAmt);\\r\\n            wantAmt = IERC20(wantAddress).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        if (_wantAmt > wantAmt) {\\r\\n            _wantAmt = wantAmt;\\r\\n        }\\r\\n\\r\\n        if (_wantAmt > wantLockedTotal()) {\\r\\n            _wantAmt = wantLockedTotal();\\r\\n        }\\r\\n\\r\\n        uint256 sharesRemoved = _wantAmt * sharesTotal / wantLockedTotal();\\r\\n        if (sharesRemoved > sharesTotal) {\\r\\n            sharesRemoved = sharesTotal;\\r\\n        }\\r\\n        sharesTotal = sharesTotal - sharesRemoved;\\r\\n\\r\\n        uint256 withdrawFee = _wantAmt * (withdrawFeeFactorMax -withdrawFeeFactor) / withdrawFeeFactorMax;\\r\\n        if (withdrawFee > 0) {\\r\\n            IERC20(wantAddress).safeTransfer(withdrawFeeAddress, withdrawFee);\\r\\n        }\\r\\n\\r\\n        _wantAmt = _wantAmt - withdrawFee;\\r\\n\\r\\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, _wantAmt);\\r\\n\\r\\n        return sharesRemoved;\\r\\n    }\\r\\n\\r\\n    function distributeFees(uint256 _gainedAmt) internal returns (uint256) {\\r\\n        if (controllerFee > 0) {\\r\\n            uint256 fee = _gainedAmt * controllerFee / feeMax;\\r\\n\\r\\n            _safeSwapWmatic(\\r\\n                fee,\\r\\n                gainedToWmaticPath,\\r\\n                feeAddress\\r\\n            );\\r\\n\\r\\n            _gainedAmt = _gainedAmt - fee;\\r\\n        }\\r\\n\\r\\n        return _gainedAmt;\\r\\n    }\\r\\n\\r\\n    function buyBack(uint256 _gainedAmt) internal virtual returns (uint256) {\\r\\n        if (buyBackRate > 0) {\\r\\n            uint256 buyBackAmt = _gainedAmt * buyBackRate / feeMax;\\r\\n\\r\\n            _safeSwap(\\r\\n                buyBackAmt,\\r\\n                gainedToBBankPath,\\r\\n                buyBackAddress\\r\\n            );\\r\\n\\r\\n            _gainedAmt = _gainedAmt - buyBackAmt;\\r\\n        }\\r\\n\\r\\n        return _gainedAmt;\\r\\n    }\\r\\n\\r\\n    function resetAllowances() external onlyGov {\\r\\n        _resetAllowances();\\r\\n    }\\r\\n\\r\\n    function pause() external onlyGov {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyGov {\\r\\n        _unpause();\\r\\n        _resetAllowances();\\r\\n    }\\r\\n\\r\\n    function panic() external onlyGov {\\r\\n        _pause();\\r\\n        _emergencyVaultWithdraw();\\r\\n    }\\r\\n\\r\\n    function unpanic() external onlyGov {\\r\\n        _unpause();\\r\\n        _farm();\\r\\n    }\\r\\n\\r\\n    function setGov(address _govAddress) external onlyGov {\\r\\n        govAddress = _govAddress;\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        uint256 _controllerFee,\\r\\n        uint256 _rewardRate,\\r\\n        uint256 _buyBackRate,\\r\\n        uint256 _withdrawFeeFactor,\\r\\n        uint256 _slippageFactor,\\r\\n        address _uniRouterAddress\\r\\n    ) external onlyGov {\\r\\n        require(_controllerFee + _rewardRate + _buyBackRate <= feeMaxTotal, \\\"Max fee of 10%\\\");\\r\\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \\\"_withdrawFeeFactor too low\\\");\\r\\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \\\"_withdrawFeeFactor too high\\\");\\r\\n        require(_slippageFactor <= slippageFactorUL, \\\"_slippageFactor too high\\\");\\r\\n\\r\\n        controllerFee = _controllerFee;\\r\\n        rewardRate = _rewardRate;\\r\\n        buyBackRate = _buyBackRate;\\r\\n        withdrawFeeFactor = _withdrawFeeFactor;\\r\\n        slippageFactor = _slippageFactor;\\r\\n        uniRouterAddress = _uniRouterAddress;\\r\\n\\r\\n        emit SetSettings(\\r\\n            _controllerFee, \\r\\n            _rewardRate, \\r\\n            _buyBackRate, \\r\\n            _withdrawFeeFactor, \\r\\n            _slippageFactor, \\r\\n            _uniRouterAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeSwap(\\r\\n        uint256 _amountIn,\\r\\n        address[] memory _path,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\r\\n        uint256 amountOut = amounts[amounts.length - 1];\\r\\n\\r\\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            _amountIn,\\r\\n            amountOut * slippageFactor / 1000,\\r\\n            _path,\\r\\n            _to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeSwapWmatic(\\r\\n        uint256 _amountIn,\\r\\n        address[] memory _path,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\r\\n        uint256 amountOut = amounts[amounts.length - 1];\\r\\n\\r\\n        IUniRouter02(uniRouterAddress).swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\r\\n            _amountIn,\\r\\n            amountOut * slippageFactor / 1000,\\r\\n            _path,\\r\\n            _to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\",\"keccak256\":\"0xaf401022fcb66d3744da70c5714a3f980f10784cf2b3d5c5b3ae20b73877b6a0\",\"license\":\"MIT\"},\"contracts/vault/BaseStrategyLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BaseStrategy.sol\\\";\\r\\n\\r\\nabstract contract BaseStrategyLP is BaseStrategy {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function convertDustToGained() external nonReentrant whenNotPaused {\\r\\n        // Converts dust tokens into gained tokens, which will be reinvested on the next earn().\\r\\n\\r\\n        // Converts token0 dust (if any) to gained tokens\\r\\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\\r\\n        if (token0Amt > 0 && token0Address != gainedAddress) {\\r\\n            // Swap all dust tokens to gained tokens\\r\\n            _safeSwap(\\r\\n                token0Amt,\\r\\n                token0ToGainedPath,\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Converts token1 dust (if any) to gained tokens\\r\\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\\r\\n        if (token1Amt > 0 && token1Address != gainedAddress) {\\r\\n            // Swap all dust tokens to gained tokens\\r\\n            _safeSwap(\\r\\n                token1Amt,\\r\\n                token1ToGainedPath,\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x5c43b64ee321bec9ffa5b5f52e46a42cc52027cbe3a4fccaf6ecb1d1921cbaf3\",\"license\":\"MIT\"},\"contracts/vault/StrategySushiSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/ISushiStake.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\nimport \\\"./BaseStrategyLP.sol\\\";\\r\\n\\r\\ncontract StrategySushiSwap is BaseStrategyLP {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @dev Pool id in Sushiswap\\r\\n    uint256 public pid;\\r\\n    /// @dev Sushi yield address in Polygon|Rinkeby\\r\\n    address public constant sushiYieldAddress = 0x0769fd68dFb93167989C6f7254cd0D766Fb2841F;\\r\\n    /// @dev Wmatic address in Polygon\\r\\n    // address public constant wmaticAddress = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\r\\n    address public constant wmaticAddress = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\r\\n\\r\\n    /// @dev [wmatic, bbank] path\\r\\n    address[] public wmaticToBBankPath;\\r\\n    /// @dev [wmatic, token0] path\\r\\n    address[] public wmaticToToken0Path;\\r\\n    /// @dev [wmatic, token1] path\\r\\n    address[] public wmaticToToken1Path;\\r\\n    \\r\\n\\r\\n    /// @param _vaultChefAddress VaultChef address\\r\\n    /// @param _pid pool id in Sushiswap\\r\\n    /// @param _wantAddress Want address\\r\\n    /// @param _gainedAddress Gained address\\r\\n    /// @param _gainedToWmaticPath Path for gained and wmatic\\r\\n    /// @param _gainedToBBankPath Path for gained and bbank\\r\\n    /// @param _wmaticToBBankPath Path for wmatic and bbank\\r\\n    /// @param _gainedToToken0Path Path for gained and token0\\r\\n    /// @param _gainedToToken1Path Path for gained and token1\\r\\n    /// @param _wmaticToToken0Path Path for wmatic and token0\\r\\n    /// @param _wmaticToToken1Path Path for wmatic and token1\\r\\n    /// @dev Constructor function\\r\\n    constructor(\\r\\n        address _vaultChefAddress,\\r\\n        uint256 _pid,\\r\\n        address _wantAddress,\\r\\n        address _gainedAddress,\\r\\n        address[] memory _gainedToWmaticPath,\\r\\n        address[] memory _gainedToBBankPath,\\r\\n        address[] memory _wmaticToBBankPath,\\r\\n        address[] memory _gainedToToken0Path,\\r\\n        address[] memory _gainedToToken1Path,\\r\\n        address[] memory _wmaticToToken0Path,\\r\\n        address[] memory _wmaticToToken1Path\\r\\n    ) {\\r\\n        govAddress = msg.sender;\\r\\n        vaultChefAddress = _vaultChefAddress;\\r\\n\\r\\n        wantAddress = _wantAddress;\\r\\n        token0Address = IUniPair(wantAddress).token0();\\r\\n        token1Address = IUniPair(wantAddress).token1();\\r\\n\\r\\n        uniRouterAddress = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\r\\n        pid = _pid;\\r\\n        gainedAddress = _gainedAddress;\\r\\n\\r\\n        gainedToWmaticPath = _gainedToWmaticPath;\\r\\n        gainedToBBankPath = _gainedToBBankPath;\\r\\n        wmaticToBBankPath = _wmaticToBBankPath;\\r\\n        gainedToToken0Path = _gainedToToken0Path;\\r\\n        gainedToToken1Path = _gainedToToken1Path;\\r\\n        wmaticToToken0Path = _wmaticToToken0Path;\\r\\n        wmaticToToken1Path = _wmaticToToken1Path;\\r\\n\\r\\n        transferOwnership(vaultChefAddress);\\r\\n\\r\\n        _resetAllowances();\\r\\n    }\\r\\n    \\r\\n    /// @param _amount Deposit amount to the sushi yield\\r\\n    /// @dev Vault deposit function\\r\\n    function _vaultDeposit(uint256 _amount) internal override {\\r\\n        ISushiStake(sushiYieldAddress).deposit(pid, _amount, address(this));\\r\\n    }\\r\\n\\r\\n    /// @param _amount Withdraw amount from sushi yield\\r\\n    /// @dev Vault withdraw function\\r\\n    function _vaultWithdraw(uint256 _amount) internal override {\\r\\n        ISushiStake(sushiYieldAddress).withdraw(pid, _amount, address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Earn farm tokens and add liquidity\\r\\n    function earn() external override nonReentrant whenNotPaused onlyGov {\\r\\n        // Harvest farm tokens\\r\\n        ISushiStake(sushiYieldAddress).harvest(pid, address(this));\\r\\n        \\r\\n        uint256 gainedAmt = IERC20(gainedAddress).balanceOf(address(this));\\r\\n\\r\\n        if (gainedAmt > 0) {\\r\\n            gainedAmt = distributeFees(gainedAmt, gainedAddress);\\r\\n            gainedAmt = buyBack(gainedAmt, gainedAddress);\\r\\n\\r\\n            if (gainedAddress != token0Address) {\\r\\n                _safeSwap(\\r\\n                    gainedAmt / 2,\\r\\n                    gainedToToken0Path,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (gainedAddress != token1Address) {\\r\\n                _safeSwap(\\r\\n                    gainedAmt / 2,\\r\\n                    gainedToToken1Path,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (gainedAmt > 0) {\\r\\n            uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\\r\\n            uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\\r\\n            if (token0Amt > 0 && token1Amt > 0) {\\r\\n                IUniRouter02(uniRouterAddress).addLiquidity(\\r\\n                    token0Address,\\r\\n                    token1Address,\\r\\n                    token0Amt,\\r\\n                    token1Amt,\\r\\n                    0,\\r\\n                    0,\\r\\n                    address(this),\\r\\n                    block.timestamp\\r\\n                );\\r\\n            }\\r\\n\\r\\n            lastEarnBlock = block.number;\\r\\n\\r\\n            _farm();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param _gainedAmt Gained token amount\\r\\n    /// @param _gainedAddress Gained token address\\r\\n    /// @dev Get fee of gained token amount\\r\\n    function distributeFees(uint256 _gainedAmt, address _gainedAddress) internal returns (uint256) {\\r\\n        if (controllerFee > 0) {\\r\\n            uint256 fee = _gainedAmt * controllerFee / feeMax;\\r\\n\\r\\n            if (_gainedAddress == wmaticAddress) {\\r\\n                IWETH(wmaticAddress).withdraw(fee);\\r\\n                safeTransferETH(feeAddress, fee);\\r\\n            } else {\\r\\n                _safeSwapWmatic(\\r\\n                    fee,\\r\\n                    gainedToWmaticPath,\\r\\n                    feeAddress\\r\\n                );\\r\\n            }\\r\\n\\r\\n            _gainedAmt = _gainedAmt - fee;\\r\\n        }\\r\\n\\r\\n        return _gainedAmt;\\r\\n    }\\r\\n\\r\\n    /// @param _gainedAmt Gained token amount\\r\\n    /// @param _gainedAddress Gained token address\\r\\n    /// @dev BuyBack gained token\\r\\n    function buyBack(uint256 _gainedAmt, address _gainedAddress) internal returns (uint256) {\\r\\n        if (buyBackRate > 0) {\\r\\n            uint256 buyBackAmt = _gainedAmt * buyBackRate / feeMax;\\r\\n\\r\\n            _safeSwap(\\r\\n                buyBackAmt,\\r\\n                _gainedAddress == wmaticAddress ? wmaticToBBankPath : gainedToBBankPath,\\r\\n                buyBackAddress\\r\\n            );\\r\\n\\r\\n            _gainedAmt = _gainedAmt - buyBackAmt;\\r\\n        }\\r\\n\\r\\n        return _gainedAmt;\\r\\n    }\\r\\n\\r\\n    /// @dev Shares token total amount of vault\\r\\n    function vaultSharesTotal() public override view returns (uint256) {\\r\\n        (uint256 balance,) = ISushiStake(sushiYieldAddress).userInfo(pid, address(this));\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /// @dev Locked want token total amount\\r\\n    function wantLockedTotal() public override view returns (uint256) {\\r\\n        (uint256 balance,) = ISushiStake(sushiYieldAddress).userInfo(pid, address(this));\\r\\n        return IERC20(wantAddress).balanceOf(address(this)) + balance;\\r\\n    }\\r\\n\\r\\n    /// @dev Approve and increase allowances for all need tokens\\r\\n    function _resetAllowances() internal override {\\r\\n        IERC20(wantAddress).safeApprove(sushiYieldAddress, uint256(0));\\r\\n        IERC20(wantAddress).safeIncreaseAllowance(\\r\\n            sushiYieldAddress,\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        IERC20(gainedAddress).safeApprove(uniRouterAddress, uint256(0));\\r\\n        IERC20(gainedAddress).safeIncreaseAllowance(\\r\\n            uniRouterAddress,\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        IERC20(wmaticAddress).safeApprove(uniRouterAddress, uint256(0));\\r\\n        IERC20(wmaticAddress).safeIncreaseAllowance(\\r\\n            uniRouterAddress,\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        IERC20(token0Address).safeApprove(uniRouterAddress, uint256(0));\\r\\n        IERC20(token0Address).safeIncreaseAllowance(\\r\\n            uniRouterAddress,\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        IERC20(token1Address).safeApprove(uniRouterAddress, uint256(0));\\r\\n        IERC20(token1Address).safeIncreaseAllowance(\\r\\n            uniRouterAddress,\\r\\n            type(uint256).max\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw the total shares token\\r\\n    function _emergencyVaultWithdraw() internal override {\\r\\n        ISushiStake(sushiYieldAddress).withdraw(pid, vaultSharesTotal(), address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw the total shares token\\r\\n    function emergencyPanic() external onlyGov {\\r\\n        _pause();\\r\\n        ISushiStake(sushiYieldAddress).emergencyWithdraw(pid, address(this));\\r\\n    }\\r\\n\\r\\n    /// @param to Address to send token\\r\\n    /// @param value Amount of token\\r\\n    /// @dev Transfer the amount of token\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0xe949691f88e8cf54c02b40d0788fdd9163e0872ac8efd06d585ed54becaf8a93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405243600b556000600c556032600d556000600e556101c2600f556127106010556103b66011553480156200003657600080fd5b506040516200417438038062004174833981016040819052620000599162000b2c565b6200006d6200006762000347565b6200034b565b600180819055506000600260006101000a81548160ff02191690831515021790555033600a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600260016101000a8154816001600160a01b0302191690836001600160a01b03160217905550600260019054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200015357600080fd5b505afa15801562000168573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018e919062000b0f565b600380546001600160a01b0319166001600160a01b039283161790556002546040805163d21220a760e01b815290516101009092049092169163d21220a7916004808301926020929190829003018186803b158015620001ed57600080fd5b505afa15801562000202573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000228919062000b0f565b600480546001600160a01b039283166001600160a01b031991821617909155600680548216731b02da8cb0d097eb8d57a175b88c7d8b4799750617905560188c905560058054928b16929091169190911790558651620002909060129060208a0190620009cc565b508551620002a6906013906020890190620009cc565b508451620002bc906019906020880190620009cc565b508351620002d2906014906020870190620009cc565b508251620002e8906015906020860190620009cc565b508151620002fe90601a906020850190620009cc565b5080516200031490601b906020840190620009cc565b506009546200032c906001600160a01b03166200039b565b6200033662000421565b505050505050505050505062000f92565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620003a562000347565b6001600160a01b0316620003b862000624565b6001600160a01b031614620003ea5760405162461bcd60e51b8152600401620003e19062000e15565b60405180910390fd5b6001600160a01b038116620004135760405162461bcd60e51b8152600401620003e19062000d89565b6200041e816200034b565b50565b600254620004609061010090046001600160a01b0316730769fd68dfb93167989c6f7254cd0d766fb2841f600062000633602090811b62001beb17901c565b600254620004a09061010090046001600160a01b0316730769fd68dfb93167989c6f7254cd0d766fb2841f60001962000741602090811b62001d1717901c565b600654600554620004cc916001600160a01b039182169116600062000633602090811b62001beb17901c565b600654600554620004f9916001600160a01b03918216911660001962000741602090811b62001d1717901c565b600654620005349073c778417e063141139fce010982780140aa0cd5ab906001600160a01b0316600062000633602090811b62001beb17901c565b600654620005709073c778417e063141139fce010982780140aa0cd5ab906001600160a01b031660001962000741602090811b62001d1717901c565b6006546003546200059c916001600160a01b039182169116600062000633602090811b62001beb17901c565b600654600354620005c9916001600160a01b03918216911660001962000741602090811b62001d1717901c565b600654600454620005f5916001600160a01b039182169116600062000633602090811b62001beb17901c565b60065460045462000622916001600160a01b03918216911660001962000741602090811b62001d1717901c565b565b6000546001600160a01b031690565b801580620006c25750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906200066c903090869060040162000d21565b60206040518083038186803b1580156200068557600080fd5b505afa1580156200069a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c0919062000cea565b155b620006e15760405162461bcd60e51b8152600401620003e19062000ecb565b6200073c8363095ea7b360e01b84846040516024016200070392919062000d3b565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b0393841617905290620007fe16565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016200077492919062000d21565b60206040518083038186803b1580156200078d57600080fd5b505afa158015620007a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007c8919062000cea565b620007d4919062000f28565b9050620007f88463095ea7b360e01b85846040516024016200070392919062000d3b565b50505050565b60006200085a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200089a60201b62001dc3179092919060201c565b8051909150156200073c57808060200190518101906200087b919062000cc8565b6200073c5760405162461bcd60e51b8152600401620003e19062000e81565b6060620008ab8484600085620008b5565b90505b9392505050565b606082471015620008da5760405162461bcd60e51b8152600401620003e19062000dcf565b620008e58562000984565b620009045760405162461bcd60e51b8152600401620003e19062000e4a565b600080866001600160a01b0316858760405162000922919062000d03565b60006040518083038185875af1925050503d806000811462000961576040519150601f19603f3d011682016040523d82523d6000602084013e62000966565b606091505b509092509050620009798282866200098e565b979650505050505050565b803b15155b919050565b606083156200099f575081620008ae565b825115620009b05782518084602001fd5b8160405162461bcd60e51b8152600401620003e1919062000d54565b82805482825590600052602060002090810192821562000a24579160200282015b8281111562000a2457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620009ed565b5062000a3292915062000a36565b5090565b5b8082111562000a32576000815560010162000a37565b80516001600160a01b03811681146200098957600080fd5b600082601f83011262000a76578081fd5b815160206001600160401b038083111562000a955762000a9562000f7c565b8183026040518382820101818110848211171562000ab75762000ab762000f7c565b6040528481528381019250868401828801850189101562000ad6578687fd5b8692505b8583101562000b035762000aee8162000a4d565b84529284019260019290920191840162000ada565b50979650505050505050565b60006020828403121562000b21578081fd5b620008ae8262000a4d565b60008060008060008060008060008060006101608c8e03121562000b4e578687fd5b62000b598c62000a4d565b9a5060208c0151995062000b7060408d0162000a4d565b985062000b8060608d0162000a4d565b60808d01519098506001600160401b0381111562000b9c578788fd5b62000baa8e828f0162000a65565b60a08e015190985090506001600160401b0381111562000bc8578687fd5b62000bd68e828f0162000a65565b60c08e015190975090506001600160401b0381111562000bf4578586fd5b62000c028e828f0162000a65565b60e08e015190965090506001600160401b0381111562000c20578485fd5b62000c2e8e828f0162000a65565b6101008e015190955090506001600160401b0381111562000c4d578384fd5b62000c5b8e828f0162000a65565b6101208e015190945090506001600160401b0381111562000c7a578283fd5b62000c888e828f0162000a65565b6101408e015190935090506001600160401b0381111562000ca7578182fd5b62000cb58e828f0162000a65565b9150509295989b509295989b9093969950565b60006020828403121562000cda578081fd5b81518015158114620008ae578182fd5b60006020828403121562000cfc578081fd5b5051919050565b6000825162000d1781846020870162000f4d565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b600060208252825180602084015262000d7581604085016020870162000f4d565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6000821982111562000f4857634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101562000f6a57818101518382015260200162000f50565b83811115620007f85750506000910152565b634e487b7160e01b600052604160045260246000fd5b6131d28062000fa26000396000f3fe60806040526004361061034e5760003560e01c8063783478ad116101bb578063a288fe03116100f7578063e7a0367911610095578063f36ba1971161006f578063f36ba19714610820578063fc5275d614610835578063ffbd3b1f14610855578063ffbe9f1e1461057c57610355565b8063e7a03679146107d6578063f1068454146107eb578063f2fde38b1461080057610355565b8063cfad57a2116100d1578063cfad57a214610777578063d389800f14610797578063d7cb416f146107ac578063db4b7eee146107c157610355565b8063a288fe0314610722578063b6b55f2514610742578063b74cd2421461076257610355565b80638456cb59116101645780638aa2c2f41161013e5780638aa2c2f4146106c35780638d9ab2be146106d85780638da5cb5b146106f85780638fefda061461070d57610355565b80638456cb591461068457806385f02dd614610699578063866b2018146106ae57610355565b80637b0a47ee116101955780637b0a47ee1461063a5780637ff36fbe1461064f5780638339aadc1461066457610355565b8063783478ad146105f0578063784def8c146106055780637abc39691461061a57610355565b806342da4eb31161028a5780635e21940f1161023357806368f541621161020d57806368f5416214610591578063693a090b146105a6578063715018a6146105bb57806371f564ad146105d057610355565b80635e21940f1461054757806365a5e30b1461056757806367057b6c1461057c57610355565b80634700d305116102645780634700d305146104fb5780635713071c146105105780635c975abb1461052557610355565b806342da4eb3146104bc57806344a3955e146104d157806346008a07146104e657610355565b80632e1a7d4d116102f75780633505b09f116102d15780633505b09f146104685780633d67dab61461047d5780633f4ba83a1461049257806341275358146104a757610355565b80632e1a7d4d1461041357806331282557146104335780633220d7321461045357610355565b8063178a8d0711610328578063178a8d07146103c75780631f1f9392146103dc57806326d07963146103f357610355565b806304c9d4901461035a5780630e19de88146103855780630fa4e01e146103b257610355565b3661035557005b600080fd5b34801561036657600080fd5b5061036f61086a565b60405161037c9190613011565b60405180910390f35b34801561039157600080fd5b506103a56103a03660046129f7565b610901565b60405161037c9190612b26565b3480156103be57600080fd5b5061036f61092b565b3480156103d357600080fd5b5061036f610931565b3480156103e857600080fd5b506103f1610937565b005b3480156103ff57600080fd5b506103a561040e3660046129f7565b610bb0565b34801561041f57600080fd5b5061036f61042e3660046129f7565b610bc0565b34801561043f57600080fd5b506103a561044e3660046129f7565b610e65565b34801561045f57600080fd5b506103a5610e75565b34801561047457600080fd5b506103f1610e84565b34801561048957600080fd5b506103a5610eb8565b34801561049e57600080fd5b506103f1610ec7565b3480156104b357600080fd5b506103a5610ef9565b3480156104c857600080fd5b5061036f610f08565b3480156104dd57600080fd5b5061036f611031565b3480156104f257600080fd5b506103a5611037565b34801561050757600080fd5b506103f1611046565b34801561051c57600080fd5b506103a5611080565b34801561053157600080fd5b5061053a611098565b60405161037c9190612bda565b34801561055357600080fd5b506103a56105623660046129f7565b6110a1565b34801561057357600080fd5b506103f16110b1565b34801561058857600080fd5b5061036f6110ee565b34801561059d57600080fd5b5061036f6110f4565b3480156105b257600080fd5b506103a56110fa565b3480156105c757600080fd5b506103f1611109565b3480156105dc57600080fd5b506103a56105eb3660046129f7565b611152565b3480156105fc57600080fd5b506103a5611162565b34801561061157600080fd5b506103a5611168565b34801561062657600080fd5b506103a56106353660046129f7565b611177565b34801561064657600080fd5b5061036f611187565b34801561065b57600080fd5b506103a561118d565b34801561067057600080fd5b506103a561067f3660046129f7565b61119c565b34801561069057600080fd5b506103f16111ac565b3480156106a557600080fd5b5061036f6111de565b3480156106ba57600080fd5b5061036f6111e4565b3480156106cf57600080fd5b506103a56111ea565b3480156106e457600080fd5b506103f16106f3366004612a77565b611202565b34801561070457600080fd5b506103a5611346565b34801561071957600080fd5b5061036f611355565b34801561072e57600080fd5b506103a561073d3660046129f7565b61135b565b34801561074e57600080fd5b5061036f61075d3660046129f7565b61136b565b34801561076e57600080fd5b5061036f6115af565b34801561078357600080fd5b506103f1610792366004612903565b6115b5565b3480156107a357600080fd5b506103f1611601565b3480156107b857600080fd5b506103a5611a85565b3480156107cd57600080fd5b506103a5611a94565b3480156107e257600080fd5b506103a5611aac565b3480156107f757600080fd5b5061036f611ac0565b34801561080c57600080fd5b506103f161081b366004612903565b611ac6565b34801561082c57600080fd5b506103f1611b34565b34801561084157600080fd5b506103a56108503660046129f7565b611bd5565b34801561086157600080fd5b5061036f611be5565b6018546040516393f1a40b60e01b81526000918291730769fd68dfb93167989c6f7254cd0d766fb2841f916393f1a40b916108aa9190309060040161301a565b604080518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190612a27565b509150505b90565b6017818154811061091157600080fd5b6000918252602090912001546001600160a01b0316905081565b600b5481565b600f5481565b600260015414156109635760405162461bcd60e51b815260040161095a90612f46565b60405180910390fd5b6002600155610970611098565b1561098d5760405162461bcd60e51b815260040161095a90612e32565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a08231906109be903090600401612b26565b60206040518083038186803b1580156109d657600080fd5b505afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e9190612a0f565b9050600081118015610a3157506005546003546001600160a01b03908116911614155b15610a9b57610a9b816016805480602002602001604051908101604052809291908181526020018280548015610a9057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a72575b505050505030611ddc565b600480546040516370a0823160e01b81526000926001600160a01b03909216916370a0823191610acd91309101612b26565b60206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190612a0f565b9050600081118015610b4057506005546004546001600160a01b03908116911614155b15610ba857610ba8816017805480602002602001604051908101604052809291908181526020018280548015610a90576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a7257505050505030611ddc565b505060018055565b6019818154811061091157600080fd5b6000610bca611f2e565b6001600160a01b0316610bdb611346565b6001600160a01b031614610c015760405162461bcd60e51b815260040161095a90612e69565b60026001541415610c245760405162461bcd60e51b815260040161095a90612f46565b600260015581610c465760405162461bcd60e51b815260040161095a90612e9e565b6002546040516370a0823160e01b815260009161010090046001600160a01b0316906370a0823190610c7c903090600401612b26565b60206040518083038186803b158015610c9457600080fd5b505afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190612a0f565b905080831115610d6f57610ce8610ce3828561312d565b611f32565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610d1c903090600401612b26565b60206040518083038186803b158015610d3457600080fd5b505afa158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c9190612a0f565b90505b80831115610d7b578092505b610d83610f08565b831115610d9557610d92610f08565b92505b6000610d9f610f08565b600c54610dac908661310e565b610db691906130ee565b9050600c54811115610dc75750600c545b80600c54610dd5919061312d565b600c5560105460009061271090610dec908261312d565b610df6908761310e565b610e0091906130ee565b90508015610e2a57600754600254610e2a916001600160a01b036101009092048216911683611fa4565b610e34818661312d565b600954600254919650610e599161010090046001600160a01b03908116911687611fa4565b50600180559392505050565b6013818154811061091157600080fd5b6009546001600160a01b031681565b600a546001600160a01b03163314610eae5760405162461bcd60e51b815260040161095a90612d03565b610eb6611fc3565b565b6005546001600160a01b031681565b600a546001600160a01b03163314610ef15760405162461bcd60e51b815260040161095a90612d03565b610eae612138565b6008546001600160a01b031681565b6018546040516393f1a40b60e01b81526000918291730769fd68dfb93167989c6f7254cd0d766fb2841f916393f1a40b91610f489190309060040161301a565b604080518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190612a27565b506002546040516370a0823160e01b815291925082916101009091046001600160a01b0316906370a0823190610fd1903090600401612b26565b60206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110219190612a0f565b61102b91906130d6565b91505090565b600c5481565b600a546001600160a01b031681565b600a546001600160a01b031633146110705760405162461bcd60e51b815260040161095a90612d03565b6110786121a6565b610eb6612201565b7363f7b7d85f9b02ad94c93a138a5b7508937b594281565b60025460ff1690565b601a818154811061091157600080fd5b600a546001600160a01b031633146110db5760405162461bcd60e51b815260040161095a90612d03565b6110e3612138565b6110eb61224e565b50565b61271081565b60105481565b6006546001600160a01b031681565b611111611f2e565b6001600160a01b0316611122611346565b6001600160a01b0316146111485760405162461bcd60e51b815260040161095a90612e69565b610eb6600061231b565b6015818154811061091157600080fd5b61dead81565b6007546001600160a01b031681565b6012818154811061091157600080fd5b600e5481565b6003546001600160a01b031681565b6014818154811061091157600080fd5b600a546001600160a01b031633146111d65760405162461bcd60e51b815260040161095a90612d03565b610eb66121a6565b600d5481565b6126ac81565b730769fd68dfb93167989c6f7254cd0d766fb2841f81565b600a546001600160a01b0316331461122c5760405162461bcd60e51b815260040161095a90612d03565b6103e88461123a87896130d6565b61124491906130d6565b11156112625760405162461bcd60e51b815260040161095a90612fda565b6126ac8310156112845760405162461bcd60e51b815260040161095a90612c86565b6127108311156112a65760405162461bcd60e51b815260040161095a90612c4f565b6103e38211156112c85760405162461bcd60e51b815260040161095a90612d7e565b600d869055600e859055600f84905560108390556011829055600680546001600160a01b0319166001600160a01b0383161790556040517f750807eeb548451f82ba7f92d0202705fb1886ac44b94fc763520e47bbe2ff4b90611336908890889088908890889088906130a5565b60405180910390a1505050505050565b6000546001600160a01b031690565b6103e881565b6016818154811061091157600080fd5b6000611375611f2e565b6001600160a01b0316611386611346565b6001600160a01b0316146113ac5760405162461bcd60e51b815260040161095a90612e69565b600260015414156113cf5760405162461bcd60e51b815260040161095a90612f46565b60026001556113dc611098565b156113f95760405162461bcd60e51b815260040161095a90612e32565b6000611403610f08565b6002546040516370a0823160e01b81529192506000916101009091046001600160a01b0316906370a082319061143d903090600401612b26565b60206040518083038186803b15801561145557600080fd5b505afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190612a0f565b6002549091506114ad9061010090046001600160a01b031633308761236b565b6002546040516370a0823160e01b8152829161010090046001600160a01b0316906370a08231906114e2903090600401612b26565b60206040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115329190612a0f565b61153c919061312d565b93506000841161155e5760405162461bcd60e51b815260040161095a90612db5565b600061156861224e565b600c549091508190156115915783600c5483611584919061310e565b61158e91906130ee565b90505b80600c5461159f91906130d6565b600c556001805595945050505050565b6103e381565b600a546001600160a01b031633146115df5760405162461bcd60e51b815260040161095a90612d03565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156116245760405162461bcd60e51b815260040161095a90612f46565b6002600155611631611098565b1561164e5760405162461bcd60e51b815260040161095a90612e32565b600a546001600160a01b031633146116785760405162461bcd60e51b815260040161095a90612d03565b601854604051630c7e663b60e11b8152730769fd68dfb93167989c6f7254cd0d766fb2841f916318fccc76916116b39190309060040161301a565b600060405180830381600087803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b50506005546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190611718903090600401612b26565b60206040518083038186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117689190612a0f565b905080156118ae576005546117879082906001600160a01b031661238c565b6005549091506117a19082906001600160a01b03166124e7565b6003546005549192506001600160a01b03918216911614611829576118296117ca6002836130ee565b6014805480602002602001604051908101604052809291908181526020018280548015610a90576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a7257505050505030611ddc565b6004546005546001600160a01b039081169116146118ae576118ae61184f6002836130ee565b6015805480602002602001604051908101604052809291908181526020018280548015610a90576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a7257505050505030611ddc565b8015611a7e576003546040516370a0823160e01b81526000916001600160a01b0316906370a08231906118e5903090600401612b26565b60206040518083038186803b1580156118fd57600080fd5b505afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119359190612a0f565b600480546040516370a0823160e01b81529293506000926001600160a01b03909116916370a082319161196a91309101612b26565b60206040518083038186803b15801561198257600080fd5b505afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba9190612a0f565b90506000821180156119cc5750600081115b15611a6e576006546003546004805460405162e8e33760e81b81526001600160a01b039485169463e8e3370094611a189490821693909116918891889160009182913091429101612b78565b606060405180830381600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6a9190612a4a565b5050505b43600b55611a7a61224e565b5050505b5060018055565b6004546001600160a01b031681565b73c778417e063141139fce010982780140aa0cd5ab81565b60025461010090046001600160a01b031681565b60185481565b611ace611f2e565b6001600160a01b0316611adf611346565b6001600160a01b031614611b055760405162461bcd60e51b815260040161095a90612e69565b6001600160a01b038116611b2b5760405162461bcd60e51b815260040161095a90612cbd565b6110eb8161231b565b600a546001600160a01b03163314611b5e5760405162461bcd60e51b815260040161095a90612d03565b611b666121a6565b6018546040516302f940c760e41b8152730769fd68dfb93167989c6f7254cd0d766fb2841f91632f940c7091611ba19190309060040161301a565b600060405180830381600087803b158015611bbb57600080fd5b505af1158015611bcf573d6000803e3d6000fd5b50505050565b601b818154811061091157600080fd5b60115481565b801580611c735750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90611c219030908690600401612b3a565b60206040518083038186803b158015611c3957600080fd5b505afa158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c719190612a0f565b155b611c8f5760405162461bcd60e51b815260040161095a90612f7d565b611d128363095ea7b360e01b8484604051602401611cae929190612bc1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526125a4565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401611d48929190612b3a565b60206040518083038186803b158015611d6057600080fd5b505afa158015611d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d989190612a0f565b611da291906130d6565b9050611bcf8463095ea7b360e01b8584604051602401611cae929190612bc1565b6060611dd28484600085612633565b90505b9392505050565b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611e0f9087908790600401613031565b60006040518083038186803b158015611e2757600080fd5b505afa158015611e3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e63919081019061291d565b905060008160018351611e76919061312d565b81518110611e9457634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546011549192506001600160a01b031690635c11d7959087906103e890611ec8908661310e565b611ed291906130ee565b8787426040518663ffffffff1660e01b8152600401611ef5959493929190613069565b600060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b505050505050505050565b3390565b601854604051630ad58d2f60e01b8152730769fd68dfb93167989c6f7254cd0d766fb2841f91630ad58d2f91611f6f91908590309060040161304a565b600060405180830381600087803b158015611f8957600080fd5b505af1158015611f9d573d6000803e3d6000fd5b5050505050565b611d128363a9059cbb60e01b8484604051602401611cae929190612bc1565b600254611ff49061010090046001600160a01b0316730769fd68dfb93167989c6f7254cd0d766fb2841f6000611beb565b6002546120269061010090046001600160a01b0316730769fd68dfb93167989c6f7254cd0d766fb2841f600019611d17565b600654600554612044916001600160a01b0391821691166000611beb565b600654600554612063916001600160a01b039182169116600019611d17565b6006546120909073c778417e063141139fce010982780140aa0cd5ab906001600160a01b03166000611beb565b6006546120be9073c778417e063141139fce010982780140aa0cd5ab906001600160a01b0316600019611d17565b6006546003546120dc916001600160a01b0391821691166000611beb565b6006546003546120fb916001600160a01b039182169116600019611d17565b600654600454612119916001600160a01b0391821691166000611beb565b600654600454610eb6916001600160a01b039182169116600019611d17565b612140611098565b61215c5760405162461bcd60e51b815260040161095a90612c18565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61218f611f2e565b60405161219c9190612b26565b60405180910390a1565b6121ae611098565b156121cb5760405162461bcd60e51b815260040161095a90612e32565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861218f611f2e565b730769fd68dfb93167989c6f7254cd0d766fb2841f6001600160a01b0316630ad58d2f60185461222f61086a565b306040518463ffffffff1660e01b8152600401611ba19392919061304a565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190612287903090600401612b26565b60206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190612a0f565b9050806122e85760009150506108fe565b60006122f261086a565b90506122fd826126f3565b600061230761086a565b9050612313828261312d565b935050505090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611bcf846323b872dd60e01b858585604051602401611cae93929190612b54565b600d54600090156124e0576000612710600d54856123aa919061310e565b6123b491906130ee565b90506001600160a01b03831673c778417e063141139fce010982780140aa0cd5ab141561246057604051632e1a7d4d60e01b815273c778417e063141139fce010982780140aa0cd5ab90632e1a7d4d90612412908490600401613011565b600060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b505060085461245b92506001600160a01b0316905082612730565b6124d2565b6124d28160128054806020026020016040519081016040528092919081815260200182805480156124ba57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161249c575b50506008546001600160a01b031692506127bd915050565b6124dc818561312d565b9350505b5090919050565b600f54600090156124e0576000612710600f5485612505919061310e565b61250f91906130ee565b90506124d2816001600160a01b03851673c778417e063141139fce010982780140aa0cd5ab14612540576013612543565b60195b80548060200260200160405190810160405280929190818152602001828054801561259757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612579575b505050505061dead611ddc565b60006125f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611dc39092919063ffffffff16565b805190915015611d12578080602001905181019061261791906129d7565b611d125760405162461bcd60e51b815260040161095a90612efc565b6060824710156126555760405162461bcd60e51b815260040161095a90612dec565b61265e856128a9565b61267a5760405162461bcd60e51b815260040161095a90612ec5565b600080866001600160a01b031685876040516126969190612b0a565b60006040518083038185875af1925050503d80600081146126d3576040519150601f19603f3d011682016040523d82523d6000602084013e6126d8565b606091505b50915091506126e88282866128b3565b979650505050505050565b601854604051638dbdbe6d60e01b8152730769fd68dfb93167989c6f7254cd0d766fb2841f91638dbdbe6d91611f6f91908590309060040161304a565b604080516000808252602082019092526001600160a01b03841690839060405161275a9190612b0a565b60006040518083038185875af1925050503d8060008114612797576040519150601f19603f3d011682016040523d82523d6000602084013e61279c565b606091505b5050905080611d125760405162461bcd60e51b815260040161095a90612d21565b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906127f09087908790600401613031565b60006040518083038186803b15801561280857600080fd5b505afa15801561281c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612844919081019061291d565b905060008160018351612857919061312d565b8151811061287557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546011549192506001600160a01b03169063762b15629087906103e890611ec8908661310e565b803b15155b919050565b606083156128c2575081611dd5565b8251156128d25782518084602001fd5b8160405162461bcd60e51b815260040161095a9190612be5565b80356001600160a01b03811681146128ae57600080fd5b600060208284031215612914578081fd5b611dd5826128ec565b6000602080838503121561292f578182fd5b825167ffffffffffffffff80821115612946578384fd5b818501915085601f830112612959578384fd5b81518181111561296b5761296b613186565b8381026040518582820101818110858211171561298a5761298a613186565b604052828152858101935084860182860187018a10156129a8578788fd5b8795505b838610156129ca5780518552600195909501949386019386016129ac565b5098975050505050505050565b6000602082840312156129e8578081fd5b81518015158114611dd5578182fd5b600060208284031215612a08578081fd5b5035919050565b600060208284031215612a20578081fd5b5051919050565b60008060408385031215612a39578081fd5b505080516020909101519092909150565b600080600060608486031215612a5e578081fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c08789031215612a8f578182fd5b8635955060208701359450604087013593506060870135925060808701359150612abb60a088016128ec565b90509295509295509295565b6000815180845260208085019450808401835b83811015612aff5781516001600160a01b031687529582019590820190600101612ada565b509495945050505050565b60008251612b1c818460208701613144565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612c04816040850160208701613144565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604082015260600190565b6020808252601a908201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526004908201526310b3b7bb60e11b604082015260600190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526018908201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c05f77616e74416d74206973203609c1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252600e908201527f4d617820666565206f6620313025000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600083825260406020830152611dd26040830184612ac7565b92835260208301919091526001600160a01b0316604082015260600190565b600086825285602083015260a0604083015261308860a0830186612ac7565b6001600160a01b0394909416606083015250608001529392505050565b95865260208601949094526040850192909252606084015260808301526001600160a01b031660a082015260c00190565b600082198211156130e9576130e9613170565b500190565b60008261310957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561312857613128613170565b500290565b60008282101561313f5761313f613170565b500390565b60005b8381101561315f578181015183820152602001613147565b83811115611bcf5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e51deb0d9bb72b9c8bd3f844394f593658de9eab9c00adc5e715c1aa41fc3edc64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061034e5760003560e01c8063783478ad116101bb578063a288fe03116100f7578063e7a0367911610095578063f36ba1971161006f578063f36ba19714610820578063fc5275d614610835578063ffbd3b1f14610855578063ffbe9f1e1461057c57610355565b8063e7a03679146107d6578063f1068454146107eb578063f2fde38b1461080057610355565b8063cfad57a2116100d1578063cfad57a214610777578063d389800f14610797578063d7cb416f146107ac578063db4b7eee146107c157610355565b8063a288fe0314610722578063b6b55f2514610742578063b74cd2421461076257610355565b80638456cb59116101645780638aa2c2f41161013e5780638aa2c2f4146106c35780638d9ab2be146106d85780638da5cb5b146106f85780638fefda061461070d57610355565b80638456cb591461068457806385f02dd614610699578063866b2018146106ae57610355565b80637b0a47ee116101955780637b0a47ee1461063a5780637ff36fbe1461064f5780638339aadc1461066457610355565b8063783478ad146105f0578063784def8c146106055780637abc39691461061a57610355565b806342da4eb31161028a5780635e21940f1161023357806368f541621161020d57806368f5416214610591578063693a090b146105a6578063715018a6146105bb57806371f564ad146105d057610355565b80635e21940f1461054757806365a5e30b1461056757806367057b6c1461057c57610355565b80634700d305116102645780634700d305146104fb5780635713071c146105105780635c975abb1461052557610355565b806342da4eb3146104bc57806344a3955e146104d157806346008a07146104e657610355565b80632e1a7d4d116102f75780633505b09f116102d15780633505b09f146104685780633d67dab61461047d5780633f4ba83a1461049257806341275358146104a757610355565b80632e1a7d4d1461041357806331282557146104335780633220d7321461045357610355565b8063178a8d0711610328578063178a8d07146103c75780631f1f9392146103dc57806326d07963146103f357610355565b806304c9d4901461035a5780630e19de88146103855780630fa4e01e146103b257610355565b3661035557005b600080fd5b34801561036657600080fd5b5061036f61086a565b60405161037c9190613011565b60405180910390f35b34801561039157600080fd5b506103a56103a03660046129f7565b610901565b60405161037c9190612b26565b3480156103be57600080fd5b5061036f61092b565b3480156103d357600080fd5b5061036f610931565b3480156103e857600080fd5b506103f1610937565b005b3480156103ff57600080fd5b506103a561040e3660046129f7565b610bb0565b34801561041f57600080fd5b5061036f61042e3660046129f7565b610bc0565b34801561043f57600080fd5b506103a561044e3660046129f7565b610e65565b34801561045f57600080fd5b506103a5610e75565b34801561047457600080fd5b506103f1610e84565b34801561048957600080fd5b506103a5610eb8565b34801561049e57600080fd5b506103f1610ec7565b3480156104b357600080fd5b506103a5610ef9565b3480156104c857600080fd5b5061036f610f08565b3480156104dd57600080fd5b5061036f611031565b3480156104f257600080fd5b506103a5611037565b34801561050757600080fd5b506103f1611046565b34801561051c57600080fd5b506103a5611080565b34801561053157600080fd5b5061053a611098565b60405161037c9190612bda565b34801561055357600080fd5b506103a56105623660046129f7565b6110a1565b34801561057357600080fd5b506103f16110b1565b34801561058857600080fd5b5061036f6110ee565b34801561059d57600080fd5b5061036f6110f4565b3480156105b257600080fd5b506103a56110fa565b3480156105c757600080fd5b506103f1611109565b3480156105dc57600080fd5b506103a56105eb3660046129f7565b611152565b3480156105fc57600080fd5b506103a5611162565b34801561061157600080fd5b506103a5611168565b34801561062657600080fd5b506103a56106353660046129f7565b611177565b34801561064657600080fd5b5061036f611187565b34801561065b57600080fd5b506103a561118d565b34801561067057600080fd5b506103a561067f3660046129f7565b61119c565b34801561069057600080fd5b506103f16111ac565b3480156106a557600080fd5b5061036f6111de565b3480156106ba57600080fd5b5061036f6111e4565b3480156106cf57600080fd5b506103a56111ea565b3480156106e457600080fd5b506103f16106f3366004612a77565b611202565b34801561070457600080fd5b506103a5611346565b34801561071957600080fd5b5061036f611355565b34801561072e57600080fd5b506103a561073d3660046129f7565b61135b565b34801561074e57600080fd5b5061036f61075d3660046129f7565b61136b565b34801561076e57600080fd5b5061036f6115af565b34801561078357600080fd5b506103f1610792366004612903565b6115b5565b3480156107a357600080fd5b506103f1611601565b3480156107b857600080fd5b506103a5611a85565b3480156107cd57600080fd5b506103a5611a94565b3480156107e257600080fd5b506103a5611aac565b3480156107f757600080fd5b5061036f611ac0565b34801561080c57600080fd5b506103f161081b366004612903565b611ac6565b34801561082c57600080fd5b506103f1611b34565b34801561084157600080fd5b506103a56108503660046129f7565b611bd5565b34801561086157600080fd5b5061036f611be5565b6018546040516393f1a40b60e01b81526000918291730769fd68dfb93167989c6f7254cd0d766fb2841f916393f1a40b916108aa9190309060040161301a565b604080518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190612a27565b509150505b90565b6017818154811061091157600080fd5b6000918252602090912001546001600160a01b0316905081565b600b5481565b600f5481565b600260015414156109635760405162461bcd60e51b815260040161095a90612f46565b60405180910390fd5b6002600155610970611098565b1561098d5760405162461bcd60e51b815260040161095a90612e32565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a08231906109be903090600401612b26565b60206040518083038186803b1580156109d657600080fd5b505afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e9190612a0f565b9050600081118015610a3157506005546003546001600160a01b03908116911614155b15610a9b57610a9b816016805480602002602001604051908101604052809291908181526020018280548015610a9057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a72575b505050505030611ddc565b600480546040516370a0823160e01b81526000926001600160a01b03909216916370a0823191610acd91309101612b26565b60206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190612a0f565b9050600081118015610b4057506005546004546001600160a01b03908116911614155b15610ba857610ba8816017805480602002602001604051908101604052809291908181526020018280548015610a90576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a7257505050505030611ddc565b505060018055565b6019818154811061091157600080fd5b6000610bca611f2e565b6001600160a01b0316610bdb611346565b6001600160a01b031614610c015760405162461bcd60e51b815260040161095a90612e69565b60026001541415610c245760405162461bcd60e51b815260040161095a90612f46565b600260015581610c465760405162461bcd60e51b815260040161095a90612e9e565b6002546040516370a0823160e01b815260009161010090046001600160a01b0316906370a0823190610c7c903090600401612b26565b60206040518083038186803b158015610c9457600080fd5b505afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190612a0f565b905080831115610d6f57610ce8610ce3828561312d565b611f32565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610d1c903090600401612b26565b60206040518083038186803b158015610d3457600080fd5b505afa158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c9190612a0f565b90505b80831115610d7b578092505b610d83610f08565b831115610d9557610d92610f08565b92505b6000610d9f610f08565b600c54610dac908661310e565b610db691906130ee565b9050600c54811115610dc75750600c545b80600c54610dd5919061312d565b600c5560105460009061271090610dec908261312d565b610df6908761310e565b610e0091906130ee565b90508015610e2a57600754600254610e2a916001600160a01b036101009092048216911683611fa4565b610e34818661312d565b600954600254919650610e599161010090046001600160a01b03908116911687611fa4565b50600180559392505050565b6013818154811061091157600080fd5b6009546001600160a01b031681565b600a546001600160a01b03163314610eae5760405162461bcd60e51b815260040161095a90612d03565b610eb6611fc3565b565b6005546001600160a01b031681565b600a546001600160a01b03163314610ef15760405162461bcd60e51b815260040161095a90612d03565b610eae612138565b6008546001600160a01b031681565b6018546040516393f1a40b60e01b81526000918291730769fd68dfb93167989c6f7254cd0d766fb2841f916393f1a40b91610f489190309060040161301a565b604080518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190612a27565b506002546040516370a0823160e01b815291925082916101009091046001600160a01b0316906370a0823190610fd1903090600401612b26565b60206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110219190612a0f565b61102b91906130d6565b91505090565b600c5481565b600a546001600160a01b031681565b600a546001600160a01b031633146110705760405162461bcd60e51b815260040161095a90612d03565b6110786121a6565b610eb6612201565b7363f7b7d85f9b02ad94c93a138a5b7508937b594281565b60025460ff1690565b601a818154811061091157600080fd5b600a546001600160a01b031633146110db5760405162461bcd60e51b815260040161095a90612d03565b6110e3612138565b6110eb61224e565b50565b61271081565b60105481565b6006546001600160a01b031681565b611111611f2e565b6001600160a01b0316611122611346565b6001600160a01b0316146111485760405162461bcd60e51b815260040161095a90612e69565b610eb6600061231b565b6015818154811061091157600080fd5b61dead81565b6007546001600160a01b031681565b6012818154811061091157600080fd5b600e5481565b6003546001600160a01b031681565b6014818154811061091157600080fd5b600a546001600160a01b031633146111d65760405162461bcd60e51b815260040161095a90612d03565b610eb66121a6565b600d5481565b6126ac81565b730769fd68dfb93167989c6f7254cd0d766fb2841f81565b600a546001600160a01b0316331461122c5760405162461bcd60e51b815260040161095a90612d03565b6103e88461123a87896130d6565b61124491906130d6565b11156112625760405162461bcd60e51b815260040161095a90612fda565b6126ac8310156112845760405162461bcd60e51b815260040161095a90612c86565b6127108311156112a65760405162461bcd60e51b815260040161095a90612c4f565b6103e38211156112c85760405162461bcd60e51b815260040161095a90612d7e565b600d869055600e859055600f84905560108390556011829055600680546001600160a01b0319166001600160a01b0383161790556040517f750807eeb548451f82ba7f92d0202705fb1886ac44b94fc763520e47bbe2ff4b90611336908890889088908890889088906130a5565b60405180910390a1505050505050565b6000546001600160a01b031690565b6103e881565b6016818154811061091157600080fd5b6000611375611f2e565b6001600160a01b0316611386611346565b6001600160a01b0316146113ac5760405162461bcd60e51b815260040161095a90612e69565b600260015414156113cf5760405162461bcd60e51b815260040161095a90612f46565b60026001556113dc611098565b156113f95760405162461bcd60e51b815260040161095a90612e32565b6000611403610f08565b6002546040516370a0823160e01b81529192506000916101009091046001600160a01b0316906370a082319061143d903090600401612b26565b60206040518083038186803b15801561145557600080fd5b505afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190612a0f565b6002549091506114ad9061010090046001600160a01b031633308761236b565b6002546040516370a0823160e01b8152829161010090046001600160a01b0316906370a08231906114e2903090600401612b26565b60206040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115329190612a0f565b61153c919061312d565b93506000841161155e5760405162461bcd60e51b815260040161095a90612db5565b600061156861224e565b600c549091508190156115915783600c5483611584919061310e565b61158e91906130ee565b90505b80600c5461159f91906130d6565b600c556001805595945050505050565b6103e381565b600a546001600160a01b031633146115df5760405162461bcd60e51b815260040161095a90612d03565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156116245760405162461bcd60e51b815260040161095a90612f46565b6002600155611631611098565b1561164e5760405162461bcd60e51b815260040161095a90612e32565b600a546001600160a01b031633146116785760405162461bcd60e51b815260040161095a90612d03565b601854604051630c7e663b60e11b8152730769fd68dfb93167989c6f7254cd0d766fb2841f916318fccc76916116b39190309060040161301a565b600060405180830381600087803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b50506005546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190611718903090600401612b26565b60206040518083038186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117689190612a0f565b905080156118ae576005546117879082906001600160a01b031661238c565b6005549091506117a19082906001600160a01b03166124e7565b6003546005549192506001600160a01b03918216911614611829576118296117ca6002836130ee565b6014805480602002602001604051908101604052809291908181526020018280548015610a90576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a7257505050505030611ddc565b6004546005546001600160a01b039081169116146118ae576118ae61184f6002836130ee565b6015805480602002602001604051908101604052809291908181526020018280548015610a90576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a7257505050505030611ddc565b8015611a7e576003546040516370a0823160e01b81526000916001600160a01b0316906370a08231906118e5903090600401612b26565b60206040518083038186803b1580156118fd57600080fd5b505afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119359190612a0f565b600480546040516370a0823160e01b81529293506000926001600160a01b03909116916370a082319161196a91309101612b26565b60206040518083038186803b15801561198257600080fd5b505afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba9190612a0f565b90506000821180156119cc5750600081115b15611a6e576006546003546004805460405162e8e33760e81b81526001600160a01b039485169463e8e3370094611a189490821693909116918891889160009182913091429101612b78565b606060405180830381600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6a9190612a4a565b5050505b43600b55611a7a61224e565b5050505b5060018055565b6004546001600160a01b031681565b73c778417e063141139fce010982780140aa0cd5ab81565b60025461010090046001600160a01b031681565b60185481565b611ace611f2e565b6001600160a01b0316611adf611346565b6001600160a01b031614611b055760405162461bcd60e51b815260040161095a90612e69565b6001600160a01b038116611b2b5760405162461bcd60e51b815260040161095a90612cbd565b6110eb8161231b565b600a546001600160a01b03163314611b5e5760405162461bcd60e51b815260040161095a90612d03565b611b666121a6565b6018546040516302f940c760e41b8152730769fd68dfb93167989c6f7254cd0d766fb2841f91632f940c7091611ba19190309060040161301a565b600060405180830381600087803b158015611bbb57600080fd5b505af1158015611bcf573d6000803e3d6000fd5b50505050565b601b818154811061091157600080fd5b60115481565b801580611c735750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90611c219030908690600401612b3a565b60206040518083038186803b158015611c3957600080fd5b505afa158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c719190612a0f565b155b611c8f5760405162461bcd60e51b815260040161095a90612f7d565b611d128363095ea7b360e01b8484604051602401611cae929190612bc1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526125a4565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401611d48929190612b3a565b60206040518083038186803b158015611d6057600080fd5b505afa158015611d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d989190612a0f565b611da291906130d6565b9050611bcf8463095ea7b360e01b8584604051602401611cae929190612bc1565b6060611dd28484600085612633565b90505b9392505050565b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611e0f9087908790600401613031565b60006040518083038186803b158015611e2757600080fd5b505afa158015611e3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e63919081019061291d565b905060008160018351611e76919061312d565b81518110611e9457634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546011549192506001600160a01b031690635c11d7959087906103e890611ec8908661310e565b611ed291906130ee565b8787426040518663ffffffff1660e01b8152600401611ef5959493929190613069565b600060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b505050505050505050565b3390565b601854604051630ad58d2f60e01b8152730769fd68dfb93167989c6f7254cd0d766fb2841f91630ad58d2f91611f6f91908590309060040161304a565b600060405180830381600087803b158015611f8957600080fd5b505af1158015611f9d573d6000803e3d6000fd5b5050505050565b611d128363a9059cbb60e01b8484604051602401611cae929190612bc1565b600254611ff49061010090046001600160a01b0316730769fd68dfb93167989c6f7254cd0d766fb2841f6000611beb565b6002546120269061010090046001600160a01b0316730769fd68dfb93167989c6f7254cd0d766fb2841f600019611d17565b600654600554612044916001600160a01b0391821691166000611beb565b600654600554612063916001600160a01b039182169116600019611d17565b6006546120909073c778417e063141139fce010982780140aa0cd5ab906001600160a01b03166000611beb565b6006546120be9073c778417e063141139fce010982780140aa0cd5ab906001600160a01b0316600019611d17565b6006546003546120dc916001600160a01b0391821691166000611beb565b6006546003546120fb916001600160a01b039182169116600019611d17565b600654600454612119916001600160a01b0391821691166000611beb565b600654600454610eb6916001600160a01b039182169116600019611d17565b612140611098565b61215c5760405162461bcd60e51b815260040161095a90612c18565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61218f611f2e565b60405161219c9190612b26565b60405180910390a1565b6121ae611098565b156121cb5760405162461bcd60e51b815260040161095a90612e32565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861218f611f2e565b730769fd68dfb93167989c6f7254cd0d766fb2841f6001600160a01b0316630ad58d2f60185461222f61086a565b306040518463ffffffff1660e01b8152600401611ba19392919061304a565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190612287903090600401612b26565b60206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190612a0f565b9050806122e85760009150506108fe565b60006122f261086a565b90506122fd826126f3565b600061230761086a565b9050612313828261312d565b935050505090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611bcf846323b872dd60e01b858585604051602401611cae93929190612b54565b600d54600090156124e0576000612710600d54856123aa919061310e565b6123b491906130ee565b90506001600160a01b03831673c778417e063141139fce010982780140aa0cd5ab141561246057604051632e1a7d4d60e01b815273c778417e063141139fce010982780140aa0cd5ab90632e1a7d4d90612412908490600401613011565b600060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b505060085461245b92506001600160a01b0316905082612730565b6124d2565b6124d28160128054806020026020016040519081016040528092919081815260200182805480156124ba57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161249c575b50506008546001600160a01b031692506127bd915050565b6124dc818561312d565b9350505b5090919050565b600f54600090156124e0576000612710600f5485612505919061310e565b61250f91906130ee565b90506124d2816001600160a01b03851673c778417e063141139fce010982780140aa0cd5ab14612540576013612543565b60195b80548060200260200160405190810160405280929190818152602001828054801561259757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612579575b505050505061dead611ddc565b60006125f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611dc39092919063ffffffff16565b805190915015611d12578080602001905181019061261791906129d7565b611d125760405162461bcd60e51b815260040161095a90612efc565b6060824710156126555760405162461bcd60e51b815260040161095a90612dec565b61265e856128a9565b61267a5760405162461bcd60e51b815260040161095a90612ec5565b600080866001600160a01b031685876040516126969190612b0a565b60006040518083038185875af1925050503d80600081146126d3576040519150601f19603f3d011682016040523d82523d6000602084013e6126d8565b606091505b50915091506126e88282866128b3565b979650505050505050565b601854604051638dbdbe6d60e01b8152730769fd68dfb93167989c6f7254cd0d766fb2841f91638dbdbe6d91611f6f91908590309060040161304a565b604080516000808252602082019092526001600160a01b03841690839060405161275a9190612b0a565b60006040518083038185875af1925050503d8060008114612797576040519150601f19603f3d011682016040523d82523d6000602084013e61279c565b606091505b5050905080611d125760405162461bcd60e51b815260040161095a90612d21565b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906127f09087908790600401613031565b60006040518083038186803b15801561280857600080fd5b505afa15801561281c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612844919081019061291d565b905060008160018351612857919061312d565b8151811061287557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546011549192506001600160a01b03169063762b15629087906103e890611ec8908661310e565b803b15155b919050565b606083156128c2575081611dd5565b8251156128d25782518084602001fd5b8160405162461bcd60e51b815260040161095a9190612be5565b80356001600160a01b03811681146128ae57600080fd5b600060208284031215612914578081fd5b611dd5826128ec565b6000602080838503121561292f578182fd5b825167ffffffffffffffff80821115612946578384fd5b818501915085601f830112612959578384fd5b81518181111561296b5761296b613186565b8381026040518582820101818110858211171561298a5761298a613186565b604052828152858101935084860182860187018a10156129a8578788fd5b8795505b838610156129ca5780518552600195909501949386019386016129ac565b5098975050505050505050565b6000602082840312156129e8578081fd5b81518015158114611dd5578182fd5b600060208284031215612a08578081fd5b5035919050565b600060208284031215612a20578081fd5b5051919050565b60008060408385031215612a39578081fd5b505080516020909101519092909150565b600080600060608486031215612a5e578081fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c08789031215612a8f578182fd5b8635955060208701359450604087013593506060870135925060808701359150612abb60a088016128ec565b90509295509295509295565b6000815180845260208085019450808401835b83811015612aff5781516001600160a01b031687529582019590820190600101612ada565b509495945050505050565b60008251612b1c818460208701613144565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612c04816040850160208701613144565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604082015260600190565b6020808252601a908201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526004908201526310b3b7bb60e11b604082015260600190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526018908201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c05f77616e74416d74206973203609c1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252600e908201527f4d617820666565206f6620313025000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600083825260406020830152611dd26040830184612ac7565b92835260208301919091526001600160a01b0316604082015260600190565b600086825285602083015260a0604083015261308860a0830186612ac7565b6001600160a01b0394909416606083015250608001529392505050565b95865260208601949094526040850192909252606084015260808301526001600160a01b031660a082015260c00190565b600082198211156130e9576130e9613170565b500190565b60008261310957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561312857613128613170565b500290565b60008282101561313f5761313f613170565b500390565b60005b8381101561315f578181015183820152602001613147565b83811115611bcf5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e51deb0d9bb72b9c8bd3f844394f593658de9eab9c00adc5e715c1aa41fc3edc64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor function",
        "params": {
          "_gainedAddress": "Gained address",
          "_gainedToBBankPath": "Path for gained and bbank",
          "_gainedToToken0Path": "Path for gained and token0",
          "_gainedToToken1Path": "Path for gained and token1",
          "_gainedToWmaticPath": "Path for gained and wmatic",
          "_pid": "pool id in Sushiswap",
          "_vaultChefAddress": "VaultChef address",
          "_wantAddress": "Want address",
          "_wmaticToBBankPath": "Path for wmatic and bbank",
          "_wmaticToToken0Path": "Path for wmatic and token0",
          "_wmaticToToken1Path": "Path for wmatic and token1"
        }
      },
      "earn()": {
        "details": "Earn farm tokens and add liquidity"
      },
      "emergencyPanic()": {
        "details": "Withdraw the total shares token"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vaultSharesTotal()": {
        "details": "Shares token total amount of vault"
      },
      "wantLockedTotal()": {
        "details": "Locked want token total amount"
      }
    },
    "stateVariables": {
      "pid": {
        "details": "Pool id in Sushiswap"
      },
      "sushiYieldAddress": {
        "details": "Sushi yield address in Polygon|Rinkeby"
      },
      "wmaticAddress": {
        "details": "Wmatic address in Polygon"
      },
      "wmaticToBBankPath": {
        "details": "[wmatic, bbank] path"
      },
      "wmaticToToken0Path": {
        "details": "[wmatic, token0] path"
      },
      "wmaticToToken1Path": {
        "details": "[wmatic, token1] path"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 122,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2557,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "wantAddress",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2559,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "token0Address",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2561,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "token1Address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2563,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "gainedAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2565,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "uniRouterAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2570,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "withdrawFeeAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2572,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "feeAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2574,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "vaultChefAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2576,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "govAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2580,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "lastEarnBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2583,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2589,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "controllerFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2592,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "rewardRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2595,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "buyBackRate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2604,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "withdrawFeeFactor",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2613,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "slippageFactor",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2619,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "gainedToWmaticPath",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2622,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "gainedToBBankPath",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2625,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "gainedToToken0Path",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2628,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "gainedToToken1Path",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2631,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "token0ToGainedPath",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2634,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "token1ToGainedPath",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3427,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "pid",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 3439,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "wmaticToBBankPath",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3443,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "wmaticToToken0Path",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3447,
        "contract": "contracts/vault/StrategySushiSwap.sol:StrategySushiSwap",
        "label": "wmaticToToken1Path",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}