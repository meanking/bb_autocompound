{
  "address": "0x48De7F1b8000b0c962D3D48c4CCA295367fF8027",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strat",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "OperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ResetAllowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ResetSingleAllowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strat",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "resetSingleAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xccbd5ff4893dca9a68ba94aaad85bed647b0d59d43872eb766bc3e5666d4c462",
  "receipt": {
    "to": null,
    "from": "0xD81bdF78b3bC96EE1838fE4ee820145F8101BbE9",
    "contractAddress": "0x48De7F1b8000b0c962D3D48c4CCA295367fF8027",
    "transactionIndex": 3,
    "gasUsed": "1578194",
    "logsBloom": "0x
    "blockHash": "0x62fc8ccbb746dba768bb28997aa418bea558615bd1ec836afd0562cf7c35edce",
    "transactionHash": "0xccbd5ff4893dca9a68ba94aaad85bed647b0d59d43872eb766bc3e5666d4c462",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9988564,
        "transactionHash": "0xccbd5ff4893dca9a68ba94aaad85bed647b0d59d43872eb766bc3e5666d4c462",
        "address": "0x48De7F1b8000b0c962D3D48c4CCA295367fF8027",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d81bdf78b3bc96ee1838fe4ee820145f8101bbe9"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x62fc8ccbb746dba768bb28997aa418bea558615bd1ec836afd0562cf7c35edce"
      }
    ],
    "blockNumber": 9988564,
    "cumulativeGasUsed": "1765598",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "18a161ae1dcde1b7d5eb0aaa7f4e9a95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ResetAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ResetSingleAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"resetSingleAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address)\":{\"details\":\"Add a new want to the pool. Can only be called by the owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultChef.sol\":\"VaultChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// For interacting with our own strategy\\r\\ninterface IStrategy {\\r\\n    // Want address\\r\\n    function wantAddress() external view returns (address);\\r\\n\\r\\n    // Total want tokens managed by strategy\\r\\n    function wantLockedTotal() external view returns (uint256);\\r\\n\\r\\n    // Sum of all shares of users to wantLockedTotal\\r\\n    function sharesTotal() external view returns (uint256);\\r\\n\\r\\n    // Main want token compounding function\\r\\n    function earn() external;\\r\\n\\r\\n    // Transfer want tokens autoFarm -> strategy\\r\\n    function deposit(uint256 _wantAmt) external returns (uint256);\\r\\n\\r\\n    // Transfer want tokens strategy -> vaultChef\\r\\n    function withdraw(uint256 _wantAmt) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x2c74d459e00c9e122a711deeebb510caeffd7d856338f1cdd364668521bb2999\",\"license\":\"MIT\"},\"contracts/vault/Operators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Operators is Ownable {\\r\\n    mapping(address => bool) public operators;\\r\\n\\r\\n    event OperatorUpdated(address indexed operator, bool indexed status);\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operators[msg.sender], \\\"Operator: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Update the status of the operator\\r\\n    function updateOperator(address _operator, bool _status) external onlyOwner {\\r\\n        operators[_operator] = _status;\\r\\n        emit OperatorUpdated(_operator, _status);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4c674a60168746d132b03545297f3507da3ac36c18bc690d08d9211f3e1488c2\",\"license\":\"MIT\"},\"contracts/vault/VaultChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"../interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./Operators.sol\\\";\\r\\n\\r\\ncontract VaultChef is Ownable, ReentrancyGuard, Operators {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 shares; // How many LP tokens the user has provided.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 want; // Address of the want token.\\r\\n        address strat; // Strategy address that will auto compound want tokens\\r\\n    }\\r\\n\\r\\n    PoolInfo[] public poolInfo; // Info of each pool.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes LP tokens. pool => user => shares\\r\\n    mapping(address => bool) private strats;\\r\\n\\r\\n    event AddPool(address indexed strat, uint256 indexed pid);\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event ResetAllowance(address indexed user);\\r\\n    event ResetSingleAllowance(address indexed user, uint256 indexed pid);\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new want to the pool. Can only be called by the owner.\\r\\n     */\\r\\n    function addPool(address _strat) external onlyOwner nonReentrant {\\r\\n        require(!strats[_strat], \\\"Existing strategy\\\");\\r\\n        // Below line is just for validate ERC20 contract\\r\\n        IERC20(IStrategy(_strat).wantAddress()).allowance(address(this), address(_strat));\\r\\n\\r\\n        poolInfo.push(PoolInfo({want: IERC20(IStrategy(_strat).wantAddress()), strat: _strat}));\\r\\n        strats[_strat] = true;\\r\\n        resetSingleAllowance(poolInfo.length - 1);\\r\\n        emit AddPool(_strat, poolInfo.length - 1);\\r\\n    }\\r\\n\\r\\n    // Want tokens moved from user -> this -> Strat (compounding)\\r\\n    function deposit(uint256 _pid, uint256 _wantAmt) external nonReentrant {\\r\\n        _deposit(_pid, _wantAmt, msg.sender);\\r\\n    }\\r\\n\\r\\n    // For unique contract calls\\r\\n    function depositTo(\\r\\n        uint256 _pid,\\r\\n        uint256 _wantAmt,\\r\\n        address _to\\r\\n    ) external nonReentrant onlyOperator {\\r\\n        _deposit(_pid, _wantAmt, _to);\\r\\n    }\\r\\n\\r\\n    function _deposit(\\r\\n        uint256 _pid,\\r\\n        uint256 _wantAmt,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_to];\\r\\n\\r\\n        if (_wantAmt > 0) {\\r\\n            IERC20 _wantToken = pool.want;\\r\\n\\r\\n            uint256 balanceBefore = _wantToken.balanceOf(address(this));\\r\\n            _wantToken.safeTransferFrom(msg.sender, address(this), _wantAmt);\\r\\n            _wantAmt = _wantToken.balanceOf(address(this)) - balanceBefore;\\r\\n            require(_wantAmt > 0, \\\"We only accept amount > 0\\\");\\r\\n\\r\\n            uint256 sharesAdded = IStrategy(pool.strat).deposit(_wantAmt);\\r\\n            user.shares = user.shares + sharesAdded;\\r\\n        }\\r\\n        emit Deposit(_to, _pid, _wantAmt);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(uint256 _pid, uint256 _wantAmt) external nonReentrant {\\r\\n        _withdraw(_pid, _wantAmt, msg.sender);\\r\\n    }\\r\\n\\r\\n    // For unique contract calls\\r\\n    function withdrawTo(\\r\\n        uint256 _pid,\\r\\n        uint256 _wantAmt,\\r\\n        address _to\\r\\n    ) external nonReentrant onlyOperator {\\r\\n        _withdraw(_pid, _wantAmt, _to);\\r\\n    }\\r\\n\\r\\n    function _withdraw(\\r\\n        uint256 _pid,\\r\\n        uint256 _wantAmt,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        uint256 wantLockedTotal = IStrategy(pool.strat).wantLockedTotal();\\r\\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\\r\\n\\r\\n        require(user.shares > 0, \\\"user.shares is 0\\\");\\r\\n        require(sharesTotal > 0, \\\"sharesTotal is 0\\\");\\r\\n\\r\\n        // Withdraw want tokens\\r\\n        uint256 amount = (user.shares * wantLockedTotal) / sharesTotal;\\r\\n        if (_wantAmt > amount) {\\r\\n            _wantAmt = amount;\\r\\n        }\\r\\n        if (_wantAmt > 0) {\\r\\n            uint256 sharesRemoved = IStrategy(pool.strat).withdraw(_wantAmt);\\r\\n\\r\\n            if (sharesRemoved > user.shares) {\\r\\n                user.shares = 0;\\r\\n            } else {\\r\\n                user.shares = user.shares - sharesRemoved;\\r\\n            }\\r\\n\\r\\n            uint256 wantBal = IERC20(pool.want).balanceOf(address(this));\\r\\n            if (wantBal < _wantAmt) {\\r\\n                _wantAmt = wantBal;\\r\\n            }\\r\\n            pool.want.safeTransfer(_to, _wantAmt);\\r\\n        }\\r\\n        emit Withdraw(msg.sender, _pid, _wantAmt);\\r\\n    }\\r\\n\\r\\n    // Withdraw everything from pool for yourself\\r\\n    function withdrawAll(uint256 _pid) external nonReentrant {\\r\\n        _withdraw(_pid, type(uint256).max, msg.sender);\\r\\n    }\\r\\n\\r\\n    function resetAllowances() external onlyOwner {\\r\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\r\\n            PoolInfo storage pool = poolInfo[i];\\r\\n            pool.want.safeApprove(pool.strat, uint256(0));\\r\\n            pool.want.safeIncreaseAllowance(pool.strat, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        emit ResetAllowance(owner());\\r\\n    }\\r\\n\\r\\n    function resetSingleAllowance(uint256 _pid) public onlyOwner {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        pool.want.safeApprove(pool.strat, uint256(0));\\r\\n        pool.want.safeIncreaseAllowance(pool.strat, type(uint256).max);\\r\\n\\r\\n        emit ResetSingleAllowance(owner(), _pid);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5901d5fd14fbf331f097045a9cbcf961f054e43db6e5750f853f87267b1f3e2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002161001c61002a565b61002e565b6001805561007e565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611abd8061008d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a6116100975780639a269e0c116100665780639a269e0c146101fd578063d914cd4b14610210578063e2bbb15814610223578063f2fde38b1461023657610100565b8063715018a6146101ba5780638da5cb5b146101c257806393f1a40b146101d7578063958e2d31146101ea57610100565b806323e1ad7d116100d357806323e1ad7d146101795780633505b09f1461018c578063441a3e70146101945780636d44a3b2146101a757610100565b8063081e3eda1461010557806313e7c9d81461012357806314cd70e4146101435780631526fe2714610158575b600080fd5b61010d610249565b60405161011a9190611990565b60405180910390f35b61013661013136600461149c565b61024f565b60405161011a919061165c565b61015661015136600461159d565b610264565b005b61016b610166366004611528565b6102db565b60405161011a929190611605565b610156610187366004611528565b610314565b61015661040b565b6101566101a236600461157c565b610520565b6101566101b53660046114d4565b61055b565b6101566105ee565b6101ca610639565b60405161011a91906115f1565b61010d6101e5366004611558565b610648565b6101566101f8366004611528565b610665565b61015661020b36600461159d565b6106a1565b61015661021e36600461149c565b610706565b61015661023136600461157c565b6109ec565b61015661024436600461149c565b610a1f565b60035490565b60026020526000908152604090205460ff1681565b600260015414156102905760405162461bcd60e51b8152600401610287906118b8565b60405180910390fd5b60026001819055336000908152602091909152604090205460ff166102c75760405162461bcd60e51b81526004016102879061194c565b6102d2838383610a90565b50506001805550565b600381815481106102eb57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0391821692501682565b61031c610df3565b6001600160a01b031661032d610639565b6001600160a01b0316146103535760405162461bcd60e51b8152600401610287906117cb565b60006003828154811061037657634e487b7160e01b600052603260045260246000fd5b60009182526020822060016002909202019081015481549193506103a9926001600160a01b039283169290911690610df7565b600181015481546103c9916001600160a01b039182169116600019610f23565b816103d2610639565b6001600160a01b03167f2c9bf56b214176331295043f946fec75ef4734c978c591c6d08fe7d45f9132d860405160405180910390a35050565b610413610df3565b6001600160a01b0316610424610639565b6001600160a01b03161461044a5760405162461bcd60e51b8152600401610287906117cb565b60005b6003548110156104e05760006003828154811061047a57634e487b7160e01b600052603260045260246000fd5b60009182526020822060016002909202019081015481549193506104ad926001600160a01b039283169290911690610df7565b600181015481546104cd916001600160a01b039182169116600019610f23565b50806104d881611a33565b91505061044d565b506104e9610639565b6001600160a01b03167fe9c2678ff6b16779478ca0ff73f9face6adeb21fffd1b2ffd6ee79794c51294b60405160405180910390a2565b600260015414156105435760405162461bcd60e51b8152600401610287906118b8565b6002600155610553828233610a90565b505060018055565b610563610df3565b6001600160a01b0316610574610639565b6001600160a01b03161461059a5760405162461bcd60e51b8152600401610287906117cb565b6001600160a01b038216600081815260026020526040808220805460ff191685151590811790915590519092917f966c160e1c4dbc7df8d69af4ace01e9297c3cf016397b7914971f2fbfa32672d91a35050565b6105f6610df3565b6001600160a01b0316610607610639565b6001600160a01b03161461062d5760405162461bcd60e51b8152600401610287906117cb565b6106376000610fd5565b565b6000546001600160a01b031690565b600460209081526000928352604080842090915290825290205481565b600260015414156106885760405162461bcd60e51b8152600401610287906118b8565b600260015561069a8160001933610a90565b5060018055565b600260015414156106c45760405162461bcd60e51b8152600401610287906118b8565b60026001819055336000908152602091909152604090205460ff166106fb5760405162461bcd60e51b81526004016102879061194c565b6102d2838383611032565b61070e610df3565b6001600160a01b031661071f610639565b6001600160a01b0316146107455760405162461bcd60e51b8152600401610287906117cb565b600260015414156107685760405162461bcd60e51b8152600401610287906118b8565b60026001556001600160a01b03811660009081526005602052604090205460ff16156107a65760405162461bcd60e51b815260040161028790611794565b806001600160a01b031663e7a036796040518163ffffffff1660e01b815260040160206040518083038186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081791906114b8565b6001600160a01b031663dd62ed3e30836040518363ffffffff1660e01b8152600401610844929190611605565b60206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108949190611540565b5060036040518060400160405280836001600160a01b031663e7a036796040518163ffffffff1660e01b815260040160206040518083038186803b1580156108db57600080fd5b505afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091391906114b8565b6001600160a01b039081168252848116602092830181905284546001818101875560009687528487208651600290930201805492851673ffffffffffffffffffffffffffffffffffffffff199384161781559585015195810180549690941695909116949094179091558352600590526040909120805460ff1916821790556003546109a291610187916119f0565b6003546109b1906001906119f0565b6040516001600160a01b038316907ff5d252583cd714facf6cafc09e6ed202a7cb8f2ceec3d3b9102b12b0fe4d4be690600090a35060018055565b60026001541415610a0f5760405162461bcd60e51b8152600401610287906118b8565b6002600155610553828233611032565b610a27610df3565b6001600160a01b0316610a38610639565b6001600160a01b031614610a5e5760405162461bcd60e51b8152600401610287906117cb565b6001600160a01b038116610a845760405162461bcd60e51b81526004016102879061169a565b610a8d81610fd5565b50565b600060038481548110610ab357634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600480835260408086203387528452808620600295909502909201600181015483516342da4eb360e01b815293519197509495946001600160a01b0316936342da4eb3938084019391929190829003018186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611540565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be49190611540565b8354909150610c055760405162461bcd60e51b8152600401610287906116e0565b60008111610c255760405162461bcd60e51b815260040161028790611800565b600081838560000154610c3891906119d1565b610c4291906119b1565b905080871115610c50578096505b8615610da7576001850154604051632e1a7d4d60e01b81526000916001600160a01b031690632e1a7d4d90610c89908b90600401611990565b602060405180830381600087803b158015610ca357600080fd5b505af1158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb9190611540565b8554909150811115610cf05760008555610d00565b8454610cfd9082906119f0565b85555b85546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610d309030906004016115f1565b60206040518083038186803b158015610d4857600080fd5b505afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190611540565b905088811015610d8e578098505b8654610da4906001600160a01b0316898b6112b5565b50505b87336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56889604051610de19190611990565b60405180910390a35050505050505050565b3390565b801580610e7f5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610e2d9030908690600401611605565b60206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611540565b155b610e9b5760405162461bcd60e51b8152600401610287906118ef565b610f1e8363095ea7b360e01b8484604051602401610eba929190611643565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112d4565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610f54929190611605565b60206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611540565b610fae9190611999565b9050610fcf8463095ea7b360e01b8584604051602401610eba929190611643565b50505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006003848154811061105557634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526004825260408085206001600160a01b0388168652909252922060029091029091019150831561126c5781546040516370a0823160e01b81526001600160a01b039091169060009082906370a08231906110c09030906004016115f1565b60206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190611540565b90506111276001600160a01b038316333089611363565b6040516370a0823160e01b815281906001600160a01b038416906370a08231906111559030906004016115f1565b60206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190611540565b6111af91906119f0565b9550600086116111d15760405162461bcd60e51b815260040161028790611717565b600184015460405163b6b55f2560e01b81526000916001600160a01b03169063b6b55f2590611204908a90600401611990565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190611540565b8454909150611266908290611999565b84555050505b84836001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15866040516112a69190611990565b60405180910390a35050505050565b610f1e8363a9059cbb60e01b8484604051602401610eba929190611643565b6000611329826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113849092919063ffffffff16565b805190915015610f1e5780806020019051810190611347919061150c565b610f1e5760405162461bcd60e51b81526004016102879061186e565b610fcf846323b872dd60e01b858585604051602401610eba9392919061161f565b6060611393848460008561139d565b90505b9392505050565b6060824710156113bf5760405162461bcd60e51b81526004016102879061174e565b6113c88561145d565b6113e45760405162461bcd60e51b815260040161028790611837565b600080866001600160a01b0316858760405161140091906115d5565b60006040518083038185875af1925050503d806000811461143d576040519150601f19603f3d011682016040523d82523d6000602084013e611442565b606091505b5091509150611452828286611463565b979650505050505050565b3b151590565b60608315611472575081611396565b8251156114825782518084602001fd5b8160405162461bcd60e51b81526004016102879190611667565b6000602082840312156114ad578081fd5b813561139681611a64565b6000602082840312156114c9578081fd5b815161139681611a64565b600080604083850312156114e6578081fd5b82356114f181611a64565b9150602083013561150181611a79565b809150509250929050565b60006020828403121561151d578081fd5b815161139681611a79565b600060208284031215611539578081fd5b5035919050565b600060208284031215611551578081fd5b5051919050565b6000806040838503121561156a578182fd5b82359150602083013561150181611a64565b6000806040838503121561158e578182fd5b50508035926020909101359150565b6000806000606084860312156115b1578081fd5b833592506020840135915060408401356115ca81611a64565b809150509250925092565b600082516115e7818460208701611a07565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611686816040850160208701611a07565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526010908201527f757365722e736861726573206973203000000000000000000000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526011908201527f4578697374696e67207374726174656779000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201527f736861726573546f74616c206973203000000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60208082526024908201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b90815260200190565b600082198211156119ac576119ac611a4e565b500190565b6000826119cc57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156119eb576119eb611a4e565b500290565b600082821015611a0257611a02611a4e565b500390565b60005b83811015611a22578181015183820152602001611a0a565b83811115610fcf5750506000910152565b6000600019821415611a4757611a47611a4e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610a8d57600080fd5b8015158114610a8d57600080fdfea2646970667358221220c3e961aa361e8326bb3cda83a45eff504d422d343ad171b2ebb50b5d994f8fcc64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a6116100975780639a269e0c116100665780639a269e0c146101fd578063d914cd4b14610210578063e2bbb15814610223578063f2fde38b1461023657610100565b8063715018a6146101ba5780638da5cb5b146101c257806393f1a40b146101d7578063958e2d31146101ea57610100565b806323e1ad7d116100d357806323e1ad7d146101795780633505b09f1461018c578063441a3e70146101945780636d44a3b2146101a757610100565b8063081e3eda1461010557806313e7c9d81461012357806314cd70e4146101435780631526fe2714610158575b600080fd5b61010d610249565b60405161011a9190611990565b60405180910390f35b61013661013136600461149c565b61024f565b60405161011a919061165c565b61015661015136600461159d565b610264565b005b61016b610166366004611528565b6102db565b60405161011a929190611605565b610156610187366004611528565b610314565b61015661040b565b6101566101a236600461157c565b610520565b6101566101b53660046114d4565b61055b565b6101566105ee565b6101ca610639565b60405161011a91906115f1565b61010d6101e5366004611558565b610648565b6101566101f8366004611528565b610665565b61015661020b36600461159d565b6106a1565b61015661021e36600461149c565b610706565b61015661023136600461157c565b6109ec565b61015661024436600461149c565b610a1f565b60035490565b60026020526000908152604090205460ff1681565b600260015414156102905760405162461bcd60e51b8152600401610287906118b8565b60405180910390fd5b60026001819055336000908152602091909152604090205460ff166102c75760405162461bcd60e51b81526004016102879061194c565b6102d2838383610a90565b50506001805550565b600381815481106102eb57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0391821692501682565b61031c610df3565b6001600160a01b031661032d610639565b6001600160a01b0316146103535760405162461bcd60e51b8152600401610287906117cb565b60006003828154811061037657634e487b7160e01b600052603260045260246000fd5b60009182526020822060016002909202019081015481549193506103a9926001600160a01b039283169290911690610df7565b600181015481546103c9916001600160a01b039182169116600019610f23565b816103d2610639565b6001600160a01b03167f2c9bf56b214176331295043f946fec75ef4734c978c591c6d08fe7d45f9132d860405160405180910390a35050565b610413610df3565b6001600160a01b0316610424610639565b6001600160a01b03161461044a5760405162461bcd60e51b8152600401610287906117cb565b60005b6003548110156104e05760006003828154811061047a57634e487b7160e01b600052603260045260246000fd5b60009182526020822060016002909202019081015481549193506104ad926001600160a01b039283169290911690610df7565b600181015481546104cd916001600160a01b039182169116600019610f23565b50806104d881611a33565b91505061044d565b506104e9610639565b6001600160a01b03167fe9c2678ff6b16779478ca0ff73f9face6adeb21fffd1b2ffd6ee79794c51294b60405160405180910390a2565b600260015414156105435760405162461bcd60e51b8152600401610287906118b8565b6002600155610553828233610a90565b505060018055565b610563610df3565b6001600160a01b0316610574610639565b6001600160a01b03161461059a5760405162461bcd60e51b8152600401610287906117cb565b6001600160a01b038216600081815260026020526040808220805460ff191685151590811790915590519092917f966c160e1c4dbc7df8d69af4ace01e9297c3cf016397b7914971f2fbfa32672d91a35050565b6105f6610df3565b6001600160a01b0316610607610639565b6001600160a01b03161461062d5760405162461bcd60e51b8152600401610287906117cb565b6106376000610fd5565b565b6000546001600160a01b031690565b600460209081526000928352604080842090915290825290205481565b600260015414156106885760405162461bcd60e51b8152600401610287906118b8565b600260015561069a8160001933610a90565b5060018055565b600260015414156106c45760405162461bcd60e51b8152600401610287906118b8565b60026001819055336000908152602091909152604090205460ff166106fb5760405162461bcd60e51b81526004016102879061194c565b6102d2838383611032565b61070e610df3565b6001600160a01b031661071f610639565b6001600160a01b0316146107455760405162461bcd60e51b8152600401610287906117cb565b600260015414156107685760405162461bcd60e51b8152600401610287906118b8565b60026001556001600160a01b03811660009081526005602052604090205460ff16156107a65760405162461bcd60e51b815260040161028790611794565b806001600160a01b031663e7a036796040518163ffffffff1660e01b815260040160206040518083038186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081791906114b8565b6001600160a01b031663dd62ed3e30836040518363ffffffff1660e01b8152600401610844929190611605565b60206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108949190611540565b5060036040518060400160405280836001600160a01b031663e7a036796040518163ffffffff1660e01b815260040160206040518083038186803b1580156108db57600080fd5b505afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091391906114b8565b6001600160a01b039081168252848116602092830181905284546001818101875560009687528487208651600290930201805492851673ffffffffffffffffffffffffffffffffffffffff199384161781559585015195810180549690941695909116949094179091558352600590526040909120805460ff1916821790556003546109a291610187916119f0565b6003546109b1906001906119f0565b6040516001600160a01b038316907ff5d252583cd714facf6cafc09e6ed202a7cb8f2ceec3d3b9102b12b0fe4d4be690600090a35060018055565b60026001541415610a0f5760405162461bcd60e51b8152600401610287906118b8565b6002600155610553828233611032565b610a27610df3565b6001600160a01b0316610a38610639565b6001600160a01b031614610a5e5760405162461bcd60e51b8152600401610287906117cb565b6001600160a01b038116610a845760405162461bcd60e51b81526004016102879061169a565b610a8d81610fd5565b50565b600060038481548110610ab357634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600480835260408086203387528452808620600295909502909201600181015483516342da4eb360e01b815293519197509495946001600160a01b0316936342da4eb3938084019391929190829003018186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611540565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be49190611540565b8354909150610c055760405162461bcd60e51b8152600401610287906116e0565b60008111610c255760405162461bcd60e51b815260040161028790611800565b600081838560000154610c3891906119d1565b610c4291906119b1565b905080871115610c50578096505b8615610da7576001850154604051632e1a7d4d60e01b81526000916001600160a01b031690632e1a7d4d90610c89908b90600401611990565b602060405180830381600087803b158015610ca357600080fd5b505af1158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb9190611540565b8554909150811115610cf05760008555610d00565b8454610cfd9082906119f0565b85555b85546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610d309030906004016115f1565b60206040518083038186803b158015610d4857600080fd5b505afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190611540565b905088811015610d8e578098505b8654610da4906001600160a01b0316898b6112b5565b50505b87336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56889604051610de19190611990565b60405180910390a35050505050505050565b3390565b801580610e7f5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610e2d9030908690600401611605565b60206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611540565b155b610e9b5760405162461bcd60e51b8152600401610287906118ef565b610f1e8363095ea7b360e01b8484604051602401610eba929190611643565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112d4565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610f54929190611605565b60206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611540565b610fae9190611999565b9050610fcf8463095ea7b360e01b8584604051602401610eba929190611643565b50505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006003848154811061105557634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526004825260408085206001600160a01b0388168652909252922060029091029091019150831561126c5781546040516370a0823160e01b81526001600160a01b039091169060009082906370a08231906110c09030906004016115f1565b60206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190611540565b90506111276001600160a01b038316333089611363565b6040516370a0823160e01b815281906001600160a01b038416906370a08231906111559030906004016115f1565b60206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190611540565b6111af91906119f0565b9550600086116111d15760405162461bcd60e51b815260040161028790611717565b600184015460405163b6b55f2560e01b81526000916001600160a01b03169063b6b55f2590611204908a90600401611990565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190611540565b8454909150611266908290611999565b84555050505b84836001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15866040516112a69190611990565b60405180910390a35050505050565b610f1e8363a9059cbb60e01b8484604051602401610eba929190611643565b6000611329826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113849092919063ffffffff16565b805190915015610f1e5780806020019051810190611347919061150c565b610f1e5760405162461bcd60e51b81526004016102879061186e565b610fcf846323b872dd60e01b858585604051602401610eba9392919061161f565b6060611393848460008561139d565b90505b9392505050565b6060824710156113bf5760405162461bcd60e51b81526004016102879061174e565b6113c88561145d565b6113e45760405162461bcd60e51b815260040161028790611837565b600080866001600160a01b0316858760405161140091906115d5565b60006040518083038185875af1925050503d806000811461143d576040519150601f19603f3d011682016040523d82523d6000602084013e611442565b606091505b5091509150611452828286611463565b979650505050505050565b3b151590565b60608315611472575081611396565b8251156114825782518084602001fd5b8160405162461bcd60e51b81526004016102879190611667565b6000602082840312156114ad578081fd5b813561139681611a64565b6000602082840312156114c9578081fd5b815161139681611a64565b600080604083850312156114e6578081fd5b82356114f181611a64565b9150602083013561150181611a79565b809150509250929050565b60006020828403121561151d578081fd5b815161139681611a79565b600060208284031215611539578081fd5b5035919050565b600060208284031215611551578081fd5b5051919050565b6000806040838503121561156a578182fd5b82359150602083013561150181611a64565b6000806040838503121561158e578182fd5b50508035926020909101359150565b6000806000606084860312156115b1578081fd5b833592506020840135915060408401356115ca81611a64565b809150509250925092565b600082516115e7818460208701611a07565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611686816040850160208701611a07565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526010908201527f757365722e736861726573206973203000000000000000000000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526011908201527f4578697374696e67207374726174656779000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201527f736861726573546f74616c206973203000000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60208082526024908201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b90815260200190565b600082198211156119ac576119ac611a4e565b500190565b6000826119cc57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156119eb576119eb611a4e565b500290565b600082821015611a0257611a02611a4e565b500390565b60005b83811015611a22578181015183820152602001611a0a565b83811115610fcf5750506000910152565b6000600019821415611a4757611a47611a4e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610a8d57600080fd5b8015158114610a8d57600080fdfea2646970667358221220c3e961aa361e8326bb3cda83a45eff504d422d343ad171b2ebb50b5d994f8fcc64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address)": {
        "details": "Add a new want to the pool. Can only be called by the owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/vault/VaultChef.sol:VaultChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/vault/VaultChef.sol:VaultChef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1408,
        "contract": "contracts/vault/VaultChef.sol:VaultChef",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1479,
        "contract": "contracts/vault/VaultChef.sol:VaultChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(PoolInfo)1475_storage)dyn_storage"
      },
      {
        "astId": 1486,
        "contract": "contracts/vault/VaultChef.sol:VaultChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1469_storage))"
      },
      {
        "astId": 1490,
        "contract": "contracts/vault/VaultChef.sol:VaultChef",
        "label": "strats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)1475_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1475_storage",
        "encoding": "dynamic_array",
        "label": "struct VaultChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)222": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)1469_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1469_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1469_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct VaultChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1469_storage)"
      },
      "t_struct(PoolInfo)1475_storage": {
        "encoding": "inplace",
        "label": "struct VaultChef.PoolInfo",
        "members": [
          {
            "astId": 1472,
            "contract": "contracts/vault/VaultChef.sol:VaultChef",
            "label": "want",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)222"
          },
          {
            "astId": 1474,
            "contract": "contracts/vault/VaultChef.sol:VaultChef",
            "label": "strat",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)1469_storage": {
        "encoding": "inplace",
        "label": "struct VaultChef.UserInfo",
        "members": [
          {
            "astId": 1468,
            "contract": "contracts/vault/VaultChef.sol:VaultChef",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}